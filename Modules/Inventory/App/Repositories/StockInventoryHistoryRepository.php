<?php

namespace Modules\Inventory\App\Repositories;
use Doctrine\DBAL\DriverManager;
use Doctrine\ORM\EntityRepository;
use Modules\Inventory\App\Entities\Product;
use Modules\Inventory\App\Entities\PurchaseItem;
use Modules\Inventory\App\Entities\StockItem;
use Modules\Inventory\App\Entities\StockItemHistory;


/**
 * ItemTypeGroupingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockInventoryHistoryRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleSearchBetween($qb,$data)
    {
        if(!empty($data))
        {
            $startDate = isset($data['startDate'])  ? date('Y-m-d',strtotime($data['startDate'])) : '';
            $endDate =   isset($data['endDate'])  ? date('Y-m-d',strtotime($data['endDate'])) : '';
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';

            if (!empty($data['startDate']) ) {
                $qb->andWhere("e.updated >= :startDate");
                $qb->setParameter('startDate', $startDate.' 00:00:00');
            }
            if (!empty($data['endDate'])) {
                $qb->andWhere("e.updated <= :endDate");
                $qb->setParameter('endDate', $endDate.' 23:59:59');
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {

                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);

            }
        }

    }

    protected function handleSearchDateBetween($qb,$data)
    {

        $startDate = isset($data['startDate'])  ? $data['startDate'] : '';
        $endDate =   isset($data['endDate'])  ? $data['endDate'] : '';
        if (!empty($startDate)) {
            $start = date('Y-m-d 00:00:00',strtotime($startDate));
            $qb->andWhere("sales.created >= :startDate");
            $qb->setParameter('startDate',$start);
        }

        if (!empty($endDate)) {
            $end = date('Y-m-d 23:59:59',strtotime($startDate));
            $qb->andWhere("sales.created <= :endDate");
            $qb->setParameter('endDate',$end);
        }
    }

    public function findLastInsertedId($item)
    {
        return $this->createQueryBuilder('e')
            ->join("e.stockItem",'i')
            ->select('e.id')
            ->where("i.id = :id")->setParameter('id',$item)
            ->andWhere("e.process = :process")->setParameter('process','approved')
            ->orderBy('e.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getPurchaseLadger($item,$data = array())
    {

        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item','item');
        $qb->where("item.id = :id")->setParameter('id',$item);
        $this->handleSearchDateBetween($qb,$data);
        $qb->orderBy('e.updated','ASC');
        $result = $qb->getQuery()->getResult();
        return  $result;
    }

    public function getItemOpeningSummary($item , $field = "")
    {

        $purchase = array('purchase','purchase-return','production-issue','production-expense','production-expense-return', 'production-inventory-return','damage');
        $sales = array('sales','sales-return','production-receive','production-stock','production-stock-receive','production-stock-return');
        $purchaseSales = array('purchase-sales');
        $qb = $this->createQueryBuilder('e');
        $qb->select('MAX(e.code)');
        $qb->join("e.stockItem",'i');
        $qb->where("i.id = :id")->setParameter('id',$item);
        /* if(in_array($field,$purchase)){
             $qb->andWhere("e.mode IN (:modes)")->setParameter('modes',$purchase);
         }elseif(in_array($field,$sales)){
             $qb->andWhere("e.mode IN (:modes)")->setParameter('modes',$sales);
         }elseif(in_array($field,$purchaseSales)){
             $qb->andWhere("e.mode IN (:modes)")->setParameter('modes',$purchaseSales);
         }*/
        $qb->andWhere("e.process = :process")->setParameter('process','approved');
        $lastCode = $qb->getQuery()->getSingleScalarResult();
        if (empty($lastCode)) {
            return 0;
        }
        return $lastCode;

    }

    public function openingStockQuantity($id){

        $em = $this->_em;

        /* @var $item PurchaseItem */
        $item = $em->getRepository(PurchaseItem::class)->find($id);
        $config = $item->getStockItem()->getProduct()->getConfig();

        /* @var $entity StockItemHistory */

        $entity = new StockItemHistory();
        $exist = $this->findOneBy(array('config' => $config,'purchaseItem' => $id ,'mode' => 'opening'));
        if($exist){
            $entity = $exist;
        }
        $entity->setQuantity($item->getQuantity());
        $entity->setOpeningQuantity($item->getQuantity());
        $entity->setStockItem($item->getStockItem());
        if($item->getStockItem()->getBrand()){
            $entity->setBrand($item->getStockItem()->getBrand()->getName());
        }
        if($item->getStockItem()->getProduct()->getCategory()){
            $entity->setCategory($item->getStockItem()->getProduct()->getCategory()->getName());
        }
        $entity->setPurchaseItem($item);
        $entity->setPrice($item->getPurchasePrice());
        $entity->setPurchasePrice($item->getPurchasePrice());
        $entity->setSalesPrice($item->getSalesPrice());
        $entity->setSubTotal($item->getSubTotal());
        $entity->setTotal($entity->getSubTotal());
        $closingQuantity = $entity->getOpeningQuantity();
        $openingBalance = $entity->getSubTotal();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $entity->setCreatedAt(now());
        $entity->setUpdatedAt(now());
        $entity->setMode('opening');
        $entity->setConfig($config);
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();
    }


    public function processStockQuantity($item , $fieldName = ''){

        $em = $this->_em;

        /* @var  $entity StockItem */

        $entity = new StockItem();

        if($fieldName == 'purchase'){

            /* @var $item PurchaseItem */

            $exist = $this->findOneBy(array('purchaseItem' => $item,'mode' => 'purchase'));
            if($exist){ $entity = $exist; }
            if($item->getCustomsDuty() > 0){
                $entity->setCustomsDuty($item->getCustomsDuty());
            }
            if($item->getSupplementaryDuty() > 0){
                $entity->setSupplementaryDuty($item->getSupplementaryDuty());
            }
            if($item->getValueAddedTax() > 0){
                $entity->setValueAddedTax($item->getValueAddedTax());
            }
            if($item->getAdvanceIncomeTax() > 0){
                $entity->setAdvanceIncomeTax($item->getAdvanceIncomeTax());
            }
            if($item->getRegulatoryDuty() > 0){
                $entity->setRecurringDeposit($item->getRegulatoryDuty());
            }
            if ($item->getAdvanceTax() > 0) {
                $entity->setAdvanceTax($item->getAdvanceTax());
            }
            $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
            $entity->setQuantity($item->getTotalQuantity());
            $entity->setPurchaseQuantity($item->getTotalQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setPurchaseItem($item);
            $entity->setPurchase($item->getPurchase());
            $entity->setPrice($item->getActualPurchasePrice());
            $entity->setPurchasePrice($item->getActualPurchasePrice());
            $entity->setSubTotal($item->getActualSubTotal());
            $entity->setTotal($entity->getTotal());
            $entity->setMode('purchase');
            if($openting){
                $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
                $entity->setOpeningQuantity(floatval($opening->getClosingBalance()));
                $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
            }else{
                $entity->setOpeningQuantity(0);
                $entity->setOpeningBalance(0);
            }
            $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
            $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
            $entity ->setClosingQuantity(floatval($closingQuantity));
            $entity->setClosingBalance(floatval($openingBalance));
            if($item->getPurchase()->getMode() == 'foreign'){
                $entity->setRemark('Import');
            }else{
                $entity->setRemark('Purchase');
            }

        }elseif($fieldName == 'purchase-return') {

            /* @var $item PurchaseReturnItem */

            $exist = $this->findOneBy(array('purchaseReturnItem' => $item, 'mode' => 'purchase-return'));

            if ($exist) {
                $entity = $exist;
            }

            if ($item->getCustomsDuty() > 0) {
                $entity->setCustomsDuty($item->getCustomsDuty());
            }
            if ($item->getSupplementaryDuty() > 0) {
                $entity->setSupplementaryDuty($item->getSupplementaryDuty());
            }
            if ($item->getValueAddedTax() > 0) {
                $entity->setValueAddedTax($item->getValueAddedTax());
            }
            if ($item->getAdvanceIncomeTax() > 0) {
                $entity->setAdvanceIncomeTax($item->getAdvanceIncomeTax());
            }
            if ($item->getRegulatoryDuty() > 0) {
                $entity->setRecurringDeposit($item->getRegulatoryDuty());
            }
            if ($item->getAdvanceTax() > 0) {
                $entity->setAdvanceTax($item->getAdvanceTax());
            }
            $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
            $entity->setQuantity("-".$item->getQuantity());
            $entity->setPurchaseReturnQuantity($item->getQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setPurchaseReturnItem($item);
            $entity->setPurchaseItem($item->getPurchaseItem());
            $entity->setPrice($item->getPrice());
            $entity->setPurchasePrice($item->getPrice());
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getTotal());
            $entity->setMode('purchase-return');
            $entity->setRemark('Debit-note');

        }elseif($fieldName == 'sales'){

            /* @var $item SalesItem */

            $exist = $this->findOneBy(array('salesItem' => $item,'mode' => 'sales'));
            if($exist){ $entity = $exist; }
            if ($item->getValueAddedTax() > 0) {
                $entity->setValueAddedTax($item->getValueAddedTax());
            }
            if ($item->getSupplementaryDuty() > 0) {
                $entity->setSupplementaryDuty($item->getSupplementaryDuty());
            }
            if ($item->getAdvanceTax() > 0) {
                $entity->setAdvanceTax($item->getAdvanceTax());
            }
            $entity->setQuantity('-'.$item->getTotalQuantity());
            $entity->setSalesQuantity($item->getTotalQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setSales($item->getSales());
            $entity->setSalesItem($item);
            $entity->setProductionBatchItem($item->getProductionBatchItem());
            $entity->setPrice($item->getSalesPrice());
            $entity->setSalesPrice($item->getSalesPrice());
            $entity->setSupplementaryDuty($item->getSupplementaryDuty());
            $entity->setValueAddedTax($item->getValueAddedTax());
            $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getTotal());
            $entity->setIssueDate($item->getSales()->getIssueDate());
            $entity->setMode('sales');
            if($item->getSales()->getMode() == 'foreign'){
                $entity->setRemark('Export');
            }else{
                $entity->setRemark  ('Sales');
            }


        }elseif($fieldName == 'sales-return'){

            /* @var $item SalesReturnItem */

            $exist = $this->findOneBy(array('salesReturnItem' => $item,'mode' => 'sales-return'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity($item->getQuantity());
            $entity->setSalesReturnQuantity($item->getQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setSalesReturnItem($item);
            $entity->setSalesItem($item->getSalesItem());
            $entity->setProductionBatchItem($item->getSalesItem()->getProductionBatchItem());
            $entity->setPrice($item->getPrice());
            $entity->setSalesPrice($item->getPrice());
            $entity->setSupplementaryDuty($item->getSupplementaryDuty());
            $entity->setValueAddedTax($item->getValueAddedTax());
            $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getTotal());
            $entity->setIssueDate($item->getSalesReturn()->getIssueDate());
            $entity->setMode('sales-return');
            $entity->setRemark('Credit-note');

        }elseif($fieldName == 'production-issue'){

            /* @var $item ProductionIssue */

            $exist = $this->findOneBy(array('productionItem' => $item ,'mode' => 'production-issue'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity('-'.$item->getTotalQuantity());
            $entity->setProductionQuantity($item->getTotalQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setPrice($item->getPurchasePrice());
            $entity->setProductionIssue($item);
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getTotal());
            $entity->setIssueDate($item->getP());
            $entity->setMode('production-issue');

        }elseif($fieldName == 'production-inventory-return'){

            /* @var $item ProductionInventory */

            $exist = $this->findOneBy(array('productionInventoryReturn' => $item,'mode' => 'production-inventory-return'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity($item->getTotalQuantity());
            $entity->setProductionQuantity($item->getTotalQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setPrice($item->getPurchasePrice());
            $entity->setProductionInventoryReturn($item);
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getTotal());
            $entity->setMode('production-inventory-return');

        }elseif($fieldName == 'production-stock-receive'){

            /* @var $item ProductionReceiveBatchItem */

            $exist = $this->findOneBy(array('productionReceiveItem' => $item,'mode' => 'production-stock'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity($item->getReceiveQuantity());
            $entity->setProductionBatchItemQuantity($item->getReceiveQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setPrice($entity->getStockItem()->getSalesPrice());
            $entity->setProductionBatchItem($item->getBatchItem());
            $entity->setProductionReceiveItem($item);
            $entity->setIssueDate($item->getBatchItem()->getBatch()->getIssueDate());
            $entity->setMode('production-stock');
            $entity->setRemark('Contractual-production');

        }elseif($fieldName == 'production-stock'){

            /* @var $item ProductionBatchItem */
            $item->getReceiveQuantity();
            $exist = $this->findOneBy(array('productionBatchItem' => $item,'mode' => 'production-stock'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity($item->getReceiveQuantity());
            $entity->setProductionBatchItemQuantity($item->getReceiveQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setProductionBatchItem($item);
            $entity->setPrice($item->getStockItem()->getSalesPrice());
            $entity->setMode('production-stock');
            $entity->setIssueDate($item->getBatch()->getIssueDate());
            $entity->setRemark('Inhouse-production');

        }elseif($fieldName == 'production-stock-return'){

            /* @var $item ProductionStockReturn */

            $exist = $this->findOneBy(array('productionStockReturn' => $item,'mode' => 'production-stock-return'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity("-".$item->getQuantity());
            $entity->setProductionBatchItemReturnQuantity($item->getQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setProductionBatchItemReturn($item);
            $entity->setMode('production-stock-return');

        }elseif($fieldName == 'damage'){

            /* @var $item Damage */

            $exist = $this->findOneBy(array('damage' => $item,'mode' => 'damage'));
            if($exist){ $entity = $exist; }
            $entity->setQuantity("-".$item->getQuantity());
            $entity->setDamageQuantity($item->getQuantity());
            $entity->setStockItem($item->getStockItem());
            $entity->setPrice($item->getStockItem()->getPurchasePrice());
            $entity->setDamage($item);
            $entity->setSubTotal($item->getQuantity() * $item->getStockItem()->getPurchasePrice());
            $entity->setTotal($item->getQuantity() * $item->getStockItem()->getPurchasePrice());
            $entity->setMode('damage');
            $entity->setRemark('Damage');

        }elseif($fieldName == 'opening'){

            /* @var $item PurchaseItem */

            $item = $em->getRepository(PurchaseItem::class)->find($id);

            $exist = $this->findOneBy(array('config' => $config,'purchaseItem' => $id ,'mode' => 'opening'));
            if($exist){
                $entity = $exist;
            }
            $entity->setQuantity($item->getQuantity());
            $entity->setOpeningQuantity($item->getQuantity());
            $entity->setStockItem($item->getStockItem());
            if($item->getStockItem()->getBrand()){
                $entity->setBrand($item->getStockItem()->getBrand());
            }
            if($item->getStockItem()->getCategory()){
                $entity->setCategory($item->getStockItem()->getCategory());
            }
            $entity->setPurchaseItem($item);
            $entity->setPrice($item->getPrice());
            $entity->setPurchasePrice($item->getPurchasePrice());
            $entity->setSalesPrice($item->getSalesPrice());
            $entity->setSubTotal($item->getSubTotal());
            $entity->setTotal($entity->getSubTotal());
            $entity->setIssueDate($item->getIssueDate());
            $entity->setMode('opening');
        }


        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();
        // $this->itemUpdateClosingBalance($entity,$fieldName);

    }

    public function itemUpdateClosingBalance(StockItem $entity,$fieldName)
    {
        $em = $this->_em;
        $closing = $this->getItemOpeningSummary($entity->getStockItem(),$fieldName);
        $entity->setClosingQuantity(floatval($closing['openingQuantity']));
        $entity->setClosingBalance(floatval($closing['openingBalance']));
        $em->persist($entity);
        $em->flush();
    }

    public function getItemUpdateQuantity(Item $item , $fieldName = '')
    {
        $qb = $this->createQueryBuilder('e');
        $id = $item->getId();
        if($fieldName == 'sales'){
            $qb->select('SUM(e.salesQuantity) AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('SUM(e.salesReturnQuantity) AS quantity');
        }elseif($fieldName == 'purchase'){
            $qb->select('SUM(e.purchaseQuantity) AS quantity');
        }elseif($fieldName == 'purchase-return'){
            $qb->select('SUM(e.purchaseReturnQuantity) AS quantity');
        }elseif($fieldName == 'production-expense'){
            $qb->select('SUM(e.productionExpenseQuantity) AS quantity');
        }elseif($fieldName == 'production-expense-return'){
            $qb->select('SUM(e.productionExpenseReturnQuantity) AS quantity');
        }elseif($fieldName == 'production-issue'){
            $qb->select('SUM(e.productionIssueQuantity) AS quantity');
        }elseif($fieldName == 'production-inventory-return'){
            $qb->select('SUM(e.productionInventoryQuantity) AS quantity');
        }elseif($fieldName == 'production-stock'){
            $qb->select('SUM(e.productionBatchItemQuantity) AS quantity');
        }elseif($fieldName == 'production-stock-return'){
            $qb->select('SUM(e.productionBatchItemReturnQuantity) AS quantity');
        }elseif($fieldName == 'production-stock-receive'){
            $qb->select('SUM(e.productionStockQuantity) AS quantity');
        }elseif($fieldName == 'damage'){
            $qb->select('SUM(e.purchaseReturnQuantity) AS quantity');
        }elseif($fieldName == 'opening'){
            $qb->select('SUM(e.openingQuantity) AS quantity');
        }elseif($fieldName == 'assets'){
            $qb->select('SUM(e.assetsQuantity) AS quantity');
        }elseif($fieldName == 'assets-return'){
            $qb->select('SUM(e.assetsReturnQuantity) AS quantity');
        }
        $qb->join("e.item",'i');
        $qb->where("e.item = :id")->setParameter('id',$id);
        $qb->andWhere("e.process = :process")->setParameter('process','approved');
        $quantity = $qb->getQuery()->getOneOrNullResult();
        return $quantity['quantity'];
    }

    public function getPurchaseItemUpdateQuantity(PurchaseItem $item , $fieldName = '')
    {

        $qb = $this->createQueryBuilder('e');
        $id = $item->getId();
        if($fieldName == 'sales'){
            $qb->select('SUM(e.salesQuantity) AS quantity');
        }elseif($fieldName == 'sales-return'){
            $qb->select('SUM(e.salesReturnQuantity) AS quantity');
        }elseif($fieldName == 'purchase'){
            $qb->select('SUM(e.purchaseQuantity) AS quantity');
        }elseif($fieldName == 'purchase-return'){
            $qb->select('SUM(e.purchaseReturnQuantity) AS quantity');
        }elseif($fieldName == 'production-issue'){
            $qb->select('SUM(e.productionIssueQuantity) AS quantity');
        }elseif($fieldName == 'production-inventory-return'){
            $qb->select('SUM(e.productionInventoryQuantity) AS quantity');
        }elseif($fieldName == 'production-stock'){
            $qb->select('SUM(e.productionStockQuantity) AS quantity');
        }elseif($fieldName == 'production-stock-return'){
            $qb->select('SUM(e.productionStockReturnQuantity) AS quantity');
        }elseif($fieldName == 'production-expense'){
            $qb->select('SUM(e.productionExpenseQuantity) AS quantity');
        }elseif($fieldName == 'production-expense-return'){
            $qb->select('SUM(e.productionExpenseReturnQuantity) AS quantity');
        }elseif($fieldName == 'damage'){
            $qb->select('SUM(e.purchaseReturnQuantity) AS quantity');
        }elseif($fieldName == 'opening'){
            $qb->select('SUM(e.openingQuantity) AS quantity');
        }elseif($fieldName == 'assets'){
            $qb->select('SUM(e.assetsQuantity) AS quantity');
        }elseif($fieldName == 'assets-return'){
            $qb->select('SUM(e.assetsReturnQuantity) AS quantity');
        }
        $qb->join("e.purchaseItem",'i');
        $qb->where("e.purchaseItem = :id")->setParameter('id',$id);
        $qb->andWhere("e.process = :process")->setParameter('process','approved');
        $quantity = $qb->getQuery()->getOneOrNullResult();
        return $quantity['quantity'];

    }

    private function getTaxTariffCalculation($subTotal,$tariff)
    {
        $value = 0;
        $value = (($subTotal * $tariff)/100);
        return $value;
    }

    public function getPurchaseInsertQnt(Purchase $entity){

        $em = $this->_em;
        $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.purchase = '{$entity->getId()}'")->execute();
        /** @var $item PurchaseItem  */
        if($entity->getPurchaseItems()){
            foreach($entity->getPurchaseItems() as $item ){
                $this->processPurchaseStockQuantity($item);
            }
        }
    }

    public function processPurchaseStockQuantity(PurchaseItem $item)
    {
        $em = $this->_em;
        if($item->getStockItem()->getMasterItem()->getSlug() == "finish-goods"){
            $openting = $this->getItemOpeningSummary($item->getStockItem(),'purchase-sales');
        }else{
            $openting = $this->getItemOpeningSummary($item->getStockItem(),'purchase');
        }
        $entity = new StockItem();
        $entity->setConfig($item->getStockItem()->getConfig());
        if($item->getCustomsDuty() > 0){
            $entity->setCustomsDuty($item->getCustomsDuty());
        }
        if($item->getSupplementaryDuty() > 0){
            $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        }
        if($item->getValueAddedTax() > 0){
            $entity->setValueAddedTax($item->getValueAddedTax());
        }
        if($item->getAdvanceIncomeTax() > 0){
            $entity->setAdvanceIncomeTax($item->getAdvanceIncomeTax());
        }
        if($item->getRegulatoryDuty() > 0){
            $entity->setRecurringDeposit($item->getRegulatoryDuty());
        }
        if ($item->getAdvanceTax() > 0) {
            $entity->setAdvanceTax($item->getAdvanceTax());
        }
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setQuantity($item->getTotalQuantity());
        $entity->setPurchaseQuantity($item->getTotalQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setPurchaseItem($item);
        $entity->setIssueDate($item->getPurchase()->getIssueDate());
        $entity->setTaxReturnNote($item->getNbrPurchaseInputTax());
        $entity->setPurchase($item->getPurchase());
        $entity->setPrice($item->getActualPurchasePrice());
        $entity->setPurchasePrice($item->getActualPurchasePrice());
        $entity->setSubTotal($item->getActualSubTotal());
        $entity->setTotal($entity->getTotal());
        $entity->setMode('purchase');
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem(),'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
        $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));

        if($item->getPurchase()->getMode() == 'foreign'){
            $entity->setRemark('Import');
        }else{
            $entity->setRemark('Purchase');
        }
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();
    }

    public function processOpeningStockItemQuantity(PurchaseItem $item)
    {
        $em = $this->_em;
        $openting = $this->getItemOpeningSummary($item->getStockItem(),'purchase');
        $entity = new StockItem();
        $entity->setConfig($item->getStockItem()->getConfig());
        if($item->getCustomsDuty() > 0){
            $entity->setCustomsDuty($item->getCustomsDuty());
        }
        if($item->getSupplementaryDuty() > 0){
            $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        }
        if($item->getValueAddedTax() > 0){
            $entity->setValueAddedTax($item->getValueAddedTax());
        }
        if($item->getAdvanceIncomeTax() > 0){
            $entity->setAdvanceIncomeTax($item->getAdvanceIncomeTax());
        }
        if($item->getRegulatoryDuty() > 0){
            $entity->setRecurringDeposit($item->getRegulatoryDuty());
        }
        if ($item->getAdvanceTax() > 0) {
            $entity->setAdvanceTax($item->getAdvanceTax());
        }
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setQuantity($item->getTotalQuantity());
        $entity->setPurchaseQuantity($item->getTotalQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setPurchaseItem($item);
        $entity->setIssueDate($item->getIssueDate());
        $entity->setTaxReturnNote($item->getNbrPurchaseInputTax());
        $entity->setPurchase($item->getPurchase());
        $entity->setPrice($item->getPurchasePrice());
        $entity->setPurchasePrice($item->getPurchasePrice());
        $entity->setSubTotal($item->getSubTotal());
        $entity->setTotal($item->getSubTotal());
        $entity->setMode('purchase');
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem(),'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
        $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $entity->setRemark('Opening');
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();
    }

    public function processOpeningProductionStockItemQuantity($config,ProductionItem $item)
    {
        $em = $this->_em;
        $entity = new StockItem();
        $entity->setConfig($config);
        $entity->setQuantity($item->getQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setPrice($entity->getStockItem()->getSalesPrice());
        $entity->setSubTotal($entity->getPrice() * $entity->getQuantity());
        // $entity->setProductionBatchItem($item);
        //  $entity->setProductionBatch($item->getBatch());
        $entity->setMode('production');
        $entity->setOpeningQuantity(0);
        $entity->setOpeningBalance(0);
        $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
        $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $entity->setRemark('Opening Production');
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();
    }

    public function getPurchaseReturnInsertQnt(PurchaseReturn $entity){

        $em = $this->_em;

        /** @var $item PurchaseReturnItem  */

        if($entity->getReturnItems()){
            $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.purchaseReturn = '{$entity->getId()}'")->execute();
            foreach($entity->getReturnItems() as $item ){
                $this->processPurchaseReturnStock($item);
                $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->updateRemovePurchaseItemStockQuantity($item->getPurchaseItem(),'purchase-return');
            }
        }
    }

    public function processPurchaseReturnStock(PurchaseReturnItem $item)
    {
        $em = $this->_em;
        $openting = $this->getItemOpeningSummary($item->getStockItem(),'purchase-return');
        $entity = new StockItem();
        $exist = $this->findOneBy(array('purchaseReturnItem' => $item, 'mode' => 'purchase-return'));
        if ($exist) {
            $entity = $exist;
        }
        $entity->setConfig($item->getStockItem()->getConfig());
        if ($item->getCustomsDuty() > 0) {
            $entity->setCustomsDuty($item->getCustomsDuty());
        }
        if ($item->getSupplementaryDuty() > 0) {
            $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        }
        if ($item->getValueAddedTax() > 0) {
            $entity->setValueAddedTax($item->getValueAddedTax());
        }
        if ($item->getAdvanceIncomeTax() > 0) {
            $entity->setAdvanceIncomeTax($item->getAdvanceIncomeTax());
        }
        if ($item->getRegulatoryDuty() > 0) {
            $entity->setRecurringDeposit($item->getRegulatoryDuty());
        }
        if ($item->getAdvanceTax() > 0) {
            $entity->setAdvanceTax($item->getAdvanceTax());
        }
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setQuantity($item->getQuantity());
        $entity->setPurchaseReturnQuantity($item->getQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setPurchaseReturnItem($item);
        $entity->setPurchaseReturn($item->getPurchaseReturn());
        $entity->setPurchaseItem($item->getPurchaseItem());
        $entity->setPrice($item->getPrice());
        $entity->setPurchasePrice($item->getPrice());
        $entity->setSubTotal($item->getSubTotal());
        $entity->setTotal($entity->getTotal());
        $entity->setMode('purchase-return');
        $entity->setRemark('Debit-note');
        if($openting){
            $opening = $this->findOneBy(array('config'=> $item->getStockItem()->getConfig(),'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = ($entity->getOpeningQuantity() - $entity->getQuantity());
        $openingBalance = ($entity->getOpeningBalance() - $entity->getSubTotal());
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setProcess('approved');
        $em->persist($entity);
        $em->flush();

    }

    public function rawMaterialConsumtion(ProductionExpense $expense,PurchaseItem $purchaseItem,float $quantity){

        $em = $this->_em;

        $openting = $this->getItemOpeningSummary($expense->getStockItem(),"production-expense");

        /* @var  $item Item */
        $item = $expense->getStockItem();

        /* @var  $entity StockItem */

        $entity = new StockItem();
        $exist = $this->findOneBy(array('productionExpense' => $expense ,'item' => $item ,'purchaseItem' => $purchaseItem ,'mode' => 'production-expense'));
        if($exist){ $entity = $exist; }
        $entity->setQuantity('-'.$quantity);
        $entity->setProductionExpenseQuantity($quantity);
        $entity->setStockItem($item);
        $entity->setPrice($item->getProductionPrice());
        $entity->setPurchasePrice($item->getProductionPrice());
        $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
        $entity->setTotal($entity->getSubTotal());
        $entity->setMode('production-expense');
        $entity->setProductionExpense($expense);
        $entity->setProductionBatchItem($expense->getProductionBatchItem());
        $entity->setIssueDate($expense->getProductionBatchItem()->getBatch()->getIssueDate());
        $entity->setPurchaseItem($purchaseItem);
        $entity->setProcess('approved');
        if($entity->getProductionBatchItem()->getBatch() == "contractual"){
            $entity->setRemark('Contractual-consumption');
        }else{
            $entity->setRemark('Consumption');
        }
        if($openting['openingQuantity'] > 0){
            $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
            $entity->setOpeningBalance(floatval($openting['openingBalance']));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $entity->setConfig($item->getConfig());
        $em->persist($entity);
        $em->flush();
        $this->itemUpdateClosingBalance($entity,$entity->getMode());

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.purchaseItem','purchaseItem');
        $qb->addSelect('SUM(stock.quantity) as quantity','SUM(stock.purchaseQuantity) as purchaseQuantity','SUM(stock.purchaseReturnQuantity) as purchaseReturnQuantity','SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity','SUM(stock.productionExpenseQuantity) as productionExpenseQuantity','SUM(stock.productionExpenseReturnQuantity) as productionExpenseReturnQuantity','SUM(stock.damageQuantity) as damageQuantity');
        $qb->where("stock.purchaseItem = :purchaseItem");
        $qb->setParameter('purchaseItem', $purchaseItem->getId());
        $qb->andWhere('stock.process IN(:process)');
        $qb->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();


        $purchaseItem->setPurchaseReturnQuantity($quantity['purchaseReturnQuantity']);
        $purchaseItem->setSalesQuantity($quantity['salesQuantity']);
        $purchaseItem->setSalesReturnQuantity($quantity['salesReturnQuantity']);
        $purchaseItem->setProductionExpenseQuantity($quantity['productionExpenseQuantity']);
        $purchaseItem->setProductionExpenseReturnQuantity($quantity['productionExpenseReturnQuantity']);
        $purchaseItem->setDamageQuantity($quantity['damageQuantity']);
        //$quantity = (($quantity['quantity'] + $purchaseItem->getSalesReturnQuantity() + $purchaseItem->getProductionExpenseReturnQuantity()) -($purchaseItem->getSalesQuantity() + $purchaseItem->getPurchaseReturnQuantity() + $purchaseItem->getProductionExpenseQuantity()));
        $purchaseItem->setRemainingQuantity($quantity['quantity']);
        $em->flush();
    }

    public function rawMaterialDirectConsumption(ProductionExpense $expense){

        $em = $this->_em;
        $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.productionExpense = '{$expense->getId()}'")->execute();
        $openting = $this->getItemOpeningSummary($expense->getStockItem(),"production-expense");

        /* @var  $item Item */

        $item = $expense->getStockItem();

        /* @var  $entity StockItem */

        $entity = new StockItem();
        $exist = $this->findOneBy(array('productionExpense' => $expense ,'item' => $item ,'mode' => 'production-expense'));
        if($exist){ $entity = $exist; }
        $entity->setConfig($item->getConfig());
        $entity->setQuantity($expense->getQuantity());
        $entity->setProductionExpenseQuantity($expense->getQuantity());
        $entity->setStockItem($item);
        $entity->setPrice($item->getProductionPrice());
        $entity->setPurchasePrice($item->getProductionPrice());
        $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
        $entity->setTotal($entity->getSubTotal());
        $entity->setMode('production-expense');
        $entity->setProductionExpense($expense);
        $entity->setProductionBatchItem($expense->getProductionBatchItem());
        $entity->setIssueDate($expense->getProductionBatchItem()->getBatch()->getIssueDate());
        $entity->setProcess('approved');
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem(),'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getOpeningQuantity() - $entity->getQuantity();
        $openingBalance =  $entity->getOpeningBalance() - $entity->getSubTotal();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        if($entity->getProductionBatchItem()->getBatch()->getMode() == "contractual"){
            $entity->setRemark('Contractual-consumption');
        }else{
            $entity->setRemark('Consumption');
        }
        $em->persist($entity);
        $em->flush();
    }

    public function productionReceiveInsertQnt(ProductionBatch $entity){

        $em = $this->_em;

        /* @var $item ProductionBatchItem */
        $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.productionBatch = '{$entity->getId()}'")->execute();
        foreach ($entity->getBatchItems() as $item):
            if($item->getReceiveQuantity() > 0){
                $this->inHouseProductionStock($item);
            }
        endforeach;
    }

    public function inHouseProductionStock(ProductionBatchItem $item)
    {

        $em = $this->_em;

        $openting = $this->getItemOpeningSummary($item->getStockItem(),"production-stock");

        $entity = new StockItem();

        /* @var $item ProductionBatchItem */

        $exist = $this->findOneBy(array('productionBatchItem' => $item,'mode' => 'production-stock'));
        if($exist){ $entity = $exist; }

        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setQuantity($item->getReceiveQuantity());
        $entity->setProductionBatchItemQuantity($item->getReceiveQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setPrice($entity->getStockItem()->getSalesPrice());
        $entity->setSubTotal($entity->getPrice() * $entity->getQuantity());
        $entity->setProductionBatchItem($item);
        $entity->setProductionBatch($item->getBatch());
        $entity->setIssueDate($item->getBatch()->getIssueDate());
        $entity->setMode('production-stock');
        $entity->setProcess('approved');
        if($item->getBatch()->getMode() == "opening"){
            $entity->setRemark('Production-opening');
        }else{
            $entity->setRemark('Production-inhouse');
        }
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
        $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $em->persist($entity);
        $em->flush();
    }

    public function contractualProductionStock(ProductionReceiveBatch $entity){

        $em = $this->_em;
        $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.productionReceive = '{$entity->getId()}'")->execute();

        /* @var $item ProductionReceiveBatchItem */

        foreach ($entity->getReceiveItems() as $item):
            if($item->getReceiveQuantity() > 0){
                $this->processContractualProductionStock($item);
            }elseif ($item->getReturnQuantity() > 0){
                $em->getRepository(ProductionExpense::class)->productionReturnElementExpense($item);
            }elseif ($item->getDamageQuantity() > 0){
                // $this->processContractualProductionStock($item);
            }
        endforeach;
    }

    public function processContractualProductionStock(ProductionReceiveBatchItem $item)
    {

        $em = $this->_em;

        $openting = $this->getItemOpeningSummary($item->getStockItem(),"production-stock");
        $entity = new StockItem();

        /* @var $item ProductionReceiveBatchItem */

        $exist = $this->findOneBy(array('productionReceiveItem' => $item,'mode' => 'production-stock'));
        if($exist){ $entity = $exist; }

        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setQuantity($item->getReceiveQuantity());
        $entity->setProductionBatchItemQuantity($item->getReceiveQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setPrice($entity->getStockItem()->getSalesPrice());
        $entity->setSubTotal($entity->getPrice() * $entity->getQuantity());
        $entity->setProductionBatchItem($item->getBatchItem());
        $entity->setIssueDate($item->getBatchItem()->getBatch()->getIssueDate());
        $entity->setProductionReceiveItem($item);
        $entity->setProductionReceive($item->getReceiveBatch());
        $entity->setMode('production-stock');
        $entity->setProcess('approved');
        $entity->setRemark('Production-contractual');

        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
        $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $em->persist($entity);
        $em->flush();
    }

    public function contructualDirectProductionExpenBatchItemRetun(ProductionBatchItem $item, ProductionExpense $expense)
    {

        $em = $this->_em;
        $reminQnt = $expense->getReturnQuantity();

        $returnProductionBatchItem = $this->findBy(array('productionBatchItem' => $item,'item' => $expense->getStockItem()));
        /* @var $stockItem StockItem */

        foreach ($returnProductionBatchItem as $stockItem):

            $quantity = $expense->getReturnQuantity();
            $openting = $this->getItemOpeningSummary($expense->getStockItem(),'production-expense-return');


            $entity = new StockItem();
            $exist = $this->findOneBy(array('item' => $expense->getStockItem(),'productionBatchItem' => $item,'mode' => 'production-expense-return'));
            if($exist){ $entity = $exist; }
            $entity->setConfig($expense->getStockItem()->getConfig());
            $entity->setQuantity($quantity);
            $entity->setProductionExpenseReturnQuantity($quantity);
            $entity->setStockItem($expense->getStockItem());
            $entity->setPrice($expense->getPurchasePrice());
            $entity->setPurchasePrice($expense->getPurchasePrice());
            $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
            $entity->setTotal($entity->getSubTotal());
            $entity->setMode('production-expense-return');
            $entity->setRemark('Contractual-return');
            $entity->setProductionBatchItem($item);
            $entity->setIssueDate($item->setIssueDate());
            $entity->setProductionExpenseReturn($expense);
            $entity->setProcess('approved');

            if($openting){
                $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
                $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
                $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
            }else{
                $entity->setOpeningQuantity(0);
                $entity->setOpeningBalance(0);
            }
            $closingQuantity = $entity->getQuantity() + $entity->getOpeningQuantity();
            $openingBalance = $entity->getSubTotal() + $entity->getOpeningBalance();
            $entity ->setClosingQuantity(floatval($closingQuantity));
            $entity->setClosingBalance(floatval($openingBalance));
            $em->persist($entity);
            $em->flush();
        endforeach;

    }

    public function contructualProductionExpenBatchItemRetun(ProductionBatchItem $item, ProductionExpense $expense)
    {

        $em = $this->_em;
        $reminQnt = $expense->getReturnQuantity();

        $returnProductionBatchItem = $this->findBy(array('productionBatchItem' => $item,'item' => $expense->getStockItem()));
        /* @var $stockItem StockItem */

        foreach ($returnProductionBatchItem as $stockItem):

            if($stockItem->getProductionExpenseQuantity() >= $expense->getReturnQuantity() and $reminQnt > 0) {

                $quantity = $expense->getReturnQuantity();
                $openting = $this->getItemOpeningSummary($expense->getStockItem());

                $entity = new StockItem();
                $exist = $this->findOneBy(array('purchaseItem' => $stockItem->getPurchaseItem() ,'item' => $expense->getStockItem(),'productionBatchItem' => $item,'mode' => 'production-expense-return'));
                if($exist){ $entity = $exist; }
                $entity->setQuantity($quantity);
                $entity->setProductionExpenseReturnQuantity($quantity);
                $entity->setStockItem($expense->getStockItem());
                $entity->setPrice($expense->getPurchasePrice());
                $entity->setPurchasePrice($expense->getPurchasePrice());
                $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
                $entity->setTotal($entity->getSubTotal());
                $entity->setMode('production-expense-return');
                $entity->setRemark('Contractual-return');
                $entity->setPurchaseItem($stockItem->getPurchaseItem());
                $entity->setProductionBatchItem($item);
                $entity->setIssueDate($item->getBatch()->getIssueDate());
                $entity->setProductionExpenseReturn($expense);
                $entity->setProcess('approved');
                if($openting['openingQuantity'] > 0){
                    $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
                    $entity->setOpeningBalance(floatval($openting['openingBalance']));
                }else{
                    $entity->setOpeningQuantity(0);
                    $entity->setOpeningBalance(0);
                }
                $entity->setConfig($entity->getStockItem()->getConfig());
                $em->persist($entity);
                $em->flush();
                $this->itemUpdateClosingBalance($entity);
                $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->updateRemovePurchaseItemStockQuantity($entity->getPurchaseItem(),'production-expense-return');
                $reminQnt = 0;
                break;

            }elseif( $stockItem->getProductionExpenseQuantity() > 0 and $stockItem->getProductionExpenseQuantity() < $reminQnt){

                $entity = new StockItem();
                $exist = $this->findOneBy(array('purchaseItem' => $stockItem->getPurchaseItem() ,'item' => $expense->getStockItem(),'productionBatchItem' => $item,'mode' => 'production-expense-return'));
                if($exist){ $entity = $exist; }
                $entity->setQuantity($stockItem->getProductionExpenseQuantity());
                $entity->setProductionExpenseReturnQuantity($stockItem->getProductionExpenseQuantity());
                $entity->setStockItem($expense->getStockItem());
                $entity->setPrice($expense->getPurchasePrice());
                $entity->setPurchasePrice($expense->getPurchasePrice());
                $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
                $entity->setTotal($entity->getSubTotal());
                $entity->setMode('production-expense-return');
                $entity->setPurchaseItem($stockItem->getPurchaseItem());
                $entity->setProductionBatchItem($item);
                $entity->setIssueDate($item->getBatch()->getIssueDate());
                $entity->setProductionExpenseReturn($expense);
                $entity->setProcess('approved');
                $entity->setRemark('Contractual-return');
                if($openting['openingQuantity'] > 0){
                    $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
                    $entity->setOpeningBalance(floatval($openting['openingBalance']));
                }else{
                    $entity->setOpeningQuantity(0);
                    $entity->setOpeningBalance(0);
                }
                $entity->setConfig($entity->getStockItem()->getConfig());
                $em->persist($entity);
                $em->flush();
                $this->itemUpdateClosingBalance($entity);
                $remin = ($reminQnt - $stockItem->getProductionExpenseQuantity());
                $reminQnt = $remin;
                $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->updateRemovePurchaseItemStockQuantity($entity->getPurchaseItem(),'production-expense-return');
                if($reminQnt == 0){
                    break;
                }

            }
        endforeach;

    }

    public function getSalesInsertQnt(Sales $entity){

        $em = $this->_em;
        if($entity->getSalesItems()){
            $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.sales = '{$entity->getId()}'")->execute();
            /* @var $item SalesItem */
            foreach($entity->getsalesItems() as $item ){
                if($item->getStockItem()->getMasterItem()->getProductGroup()->getSlug() == "finish-goods"){
                    $this->processSalesItemPurchaseStock($item);
                    $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->updateRemovePurchaseItemStockQuantity($item->getPurchaseItem(),'sales');
                }elseif ("production-item" == $item->getStockItem()->getMasterItem()->getProductGroup()->getSlug()){
                    $this->processSalesItemProductionStock($item);
                    $em->getRepository('TerminalbdProductionBundle:ProductionBatchItem')->updateBatchItemQnt($item->getProductionBatchItem());
                }
            }
        }
    }

    public function processSalesItemProductionStock(SalesItem $item)
    {
        $em = $this->_em;

        /* @var $item SalesItem */

        $openting = $this->getItemOpeningSummary($item->getStockItem(),"sales");
        $entity = new StockItem();
        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setQuantity($item->getTotalQuantity());
        $entity->setSalesQuantity($item->getTotalQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setSalesItem($item);
        $entity->setSales($item->getSales());
        $entity->setIssueDate($item->getSales()->getIssueDate());
        $entity->setProductionBatchItem($item->getProductionBatchItem());
        $entity->setPrice($item->getSalesPrice());
        $entity->setSalesPrice($item->getSalesPrice());
        $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        $entity->setValueAddedTax($item->getValueAddedTax());
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setSubTotal($item->getSubTotal());
        $entity->setTotal($entity->getTotal());
        $entity->setTaxReturnNote($item->getNbrSupplyOutputTax());
        $entity->setMode('sales');
        $entity->setProcess('approved');
        if($item->getSales()->getMode() == 'foreign'){
            $entity->setRemark('Export');
        }else{
            $entity->setRemark  ('Sales');
        }
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getOpeningQuantity() - $entity->getSalesQuantity();
        $openingBalance = $entity->getOpeningBalance() - $entity->getSubTotal();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $em->persist($entity);
        $em->flush();

    }

    public function processSalesItemPurchaseStock(SalesItem $item)
    {
        $em = $this->_em;

        /* @var $item SalesItem */

        $openting = $this->getItemOpeningSummary($item->getStockItem(),"sales");
        $entity = new StockItem();
        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setQuantity($item->getTotalQuantity());
        $entity->setSalesQuantity($item->getTotalQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setSalesItem($item);
        $entity->setSales($item->getSales());
        $entity->setIssueDate($item->getSales()->getIssueDate());
        $entity->setPurchaseItem($item->getPurchaseItem());
        $entity->setPurchasePrice($item->getPurchaseItem()->getActualPurchasePrice());
        $entity->setPrice($item->getSalesPrice());
        $entity->setSalesPrice($item->getSalesPrice());
        $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        $entity->setValueAddedTax($item->getValueAddedTax());
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setSubTotal($entity->getPurchasePrice() * $entity->getQuantity());
        $entity->setTotal($entity->getTotal());
        $entity->setTaxReturnNote($item->getNbrSupplyOutputTax());
        $entity->setMode('sales');
        $entity->setProcess('approved');
        if($item->getSales()->getMode() == 'foreign'){
            $entity->setRemark('Export');
        }else{
            $entity->setRemark  ('Sales');
        }
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getOpeningQuantity() - $entity->getSalesQuantity();
        $closingBalance = $entity->getOpeningBalance() - $entity->getSubTotal();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($closingBalance));
        $em->persist($entity);
        $em->flush();

    }

    public function getSalesReturnInsertQnt(SalesReturn $entity){

        $em = $this->_em;

        /** @var $item SalesReturnItem  */

        if($entity->getSalesReturnItems()){

            $em->createQuery("DELETE TerminalbdInventoryBundle:StockItem e WHERE e.salesReturn = '{$entity->getId()}'")->execute();
            foreach($entity->getSalesReturnItems() as $item ){

                if($item->getStockItem()->getMasterItem()->getProductGroup()->getSlug() == "finish-goods"){
                    $this->processSalesReturnPurchaseItemStock($item);
                    $em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->updateRemovePurchaseItemStockQuantity($item->getSalesItem()->getPurchaseItem(),'sales-return');
                }elseif ("production-item" == $item->getStockItem()->getMasterItem()->getProductGroup()->getSlug()){
                    $this->processSalesReturnProductionItemStock($item);
                    $em->getRepository('TerminalbdProductionBundle:ProductionBatchItem')->updateBatchItemQnt($item->getProductionBatchItem());
                }
                $em->getRepository('TerminalbdInventoryBundle:SalesItem')->updateSalesItemQnt($item->getSalesItem());
            }
        }
    }

    public function processSalesReturnProductionItemStock(SalesReturnItem $item)
    {
        $em = $this->_em;
        /* @var $item SalesReturnItem */

        $openting = $this->getItemOpeningSummary($item->getStockItem(),"sales-return");
        $entity = new StockItem();

        $exist = $this->findOneBy(array('salesItem' => $item,'mode' => 'sales-return'));
        if($exist){ $entity = $exist; }
        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setQuantity($item->getQuantity());
        $entity->setSalesReturnQuantity($item->getQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setSalesReturnItem($item);
        $entity->setSalesItem($item->getSalesItem());
        $entity->setSalesReturn($item->getSalesReturn());
        $entity->setIssueDate($item->getSalesReturn()->getIssueDate());
        //   $entity->setProductionBatchItem($item->getProductionBatchItem());
        $entity->setPrice($item->getPrice());
        $entity->setSalesPrice($item->getPrice());
        $entity->setPurchasePrice($item->getSalesItem()->getPurchasePrice());
        $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        $entity->setValueAddedTax($item->getValueAddedTax());
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setSubTotal($item->getSubTotal());
        $entity->setTotal($entity->getTotal());
        $entity->setMode('sales-return');
        $entity->setRemark('Credit-note');
        $entity->setProcess('approved');
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getOpeningQuantity() + $entity->getQuantity();
        $openingBalance = $entity->getOpeningBalance() + $entity->getSubTotal();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $em->persist($entity);
        $em->flush();

    }

    public function processSalesReturnPurchaseItemStock(SalesReturnItem $item)
    {
        $em = $this->_em;
        /* @var $item SalesReturnItem */

        $openting = $this->getItemOpeningSummary($item->getStockItem(),"sales-return");
        $entity = new StockItem();

        $exist = $this->findOneBy(array('salesItem' => $item,'mode' => 'sales-return'));
        if($exist){ $entity = $exist; }
        $entity->setConfig($item->getStockItem()->getConfig());
        $entity->setQuantity($item->getQuantity());
        $entity->setSalesReturnQuantity($item->getQuantity());
        $entity->setStockItem($item->getStockItem());
        $entity->setSalesReturnItem($item);
        $entity->setSalesItem($item->getSalesItem());
        $entity->setSalesReturn($item->getSalesReturn());
        $entity->setIssueDate($item->getSalesReturn()->getIssueDate());
        $entity->setPrice($item->getPrice());
        $entity->setSalesPrice($item->getPrice());
        $entity->setPurchasePrice($item->getSalesItem()->getPurchasePrice());
        $entity->setSupplementaryDuty($item->getSupplementaryDuty());
        $entity->setValueAddedTax($item->getValueAddedTax());
        $entity->setTotalTaxIncidence($item->getTotalTaxIncidence());
        $entity->setSubTotal($item->getQuantity() * $entity->getPurchasePrice());
        $entity->setTotal($entity->getTotal());
        $entity->setMode('sales-return');
        $entity->setRemark('Credit-note');
        $entity->setProcess('approved');
        if($openting){
            $opening = $this->findOneBy(array('config'=> $entity->getConfig(),'item'=> $entity->getStockItem() ,'code' => $openting));
            $entity->setOpeningQuantity(floatval($opening->getClosingQuantity()));
            $entity->setOpeningBalance(floatval($opening->getClosingBalance()));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $closingQuantity = $entity->getOpeningQuantity() + $entity->getQuantity();
        $openingBalance = $entity->getOpeningBalance() + $entity->getSubTotal();
        $entity ->setClosingQuantity(floatval($closingQuantity));
        $entity->setClosingBalance(floatval($openingBalance));
        $em->persist($entity);
        $em->flush();

    }

    public function productionIssueInsertQnt(ProductionIssue $entity){

        $em = $this->_em;
        $this->processStockQuantity($entity,'production-issue');
    }

    public function finishGoodsConsumtion(SalesItem $salesItem,PurchaseItem $purchaseItem,$quantity){

        $em = $this->_em;

        $openting = $this->getItemOpeningSummary($salesItem->getStockItem());

        /* @var  $entity StockItem */

        $entity = new StockItem();
        $exist = $this->findOneBy(array('salesItem' => $salesItem ,'item' => $salesItem->getStockItem() ,'purchaseItem' => $purchaseItem ,'mode' => 'sales'));
        if($exist){ $entity = $exist; }
        $entity->setQuantity('-'.$quantity);
        $entity->setSalesQuantity($quantity);
        $entity->setStockItem($salesItem->getStockItem());
        $entity->setIssueDate($salesItem->getSales()->getIssueDate());
        $entity->setSalesPrice($salesItem->getPurchasePrice());
        $entity->setPurchasePrice($salesItem->getSalesPrice());
        $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
        $entity->setTotal($entity->getSubTotal());
        $entity->setMode('sales');
        $entity->setPurchaseItem($purchaseItem);
        $entity->setSalesItem($salesItem);
        $entity->setSales($salesItem->getSales());
        $entity->setProcess('approved');
        if($entity->getSales()->getMode() == 'foreign'){
            $entity->setRemark('Export');
        }else{
            $entity->setRemark('Sales');
        }
        if($openting['openingQuantity'] > 0){
            $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
            $entity->setOpeningBalance(floatval($openting['openingBalance']));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $entity->setConfig($entity->getStockItem()->getConfig());
        $em->persist($entity);
        $em->flush();
        $this->itemUpdateClosingBalance($entity);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.purchaseItem','purchaseItem');
        $qb->addSelect('SUM(stock.quantity) as quantity','SUM(stock.purchaseQuantity) as purchaseQuantity','SUM(stock.purchaseReturnQuantity) as purchaseReturnQuantity','SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity','SUM(stock.productionExpenseQuantity) as productionExpenseQuantity','SUM(stock.productionExpenseReturnQuantity) as productionExpenseReturnQuantity','SUM(stock.damageQuantity) as damageQuantity');
        $qb->where("stock.purchaseItem = :purchaseItem");
        $qb->setParameter('purchaseItem', $purchaseItem->getId());
        $qb->andWhere('stock.process IN(:process)');
        $qb->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();

        $purchaseItem->setPurchaseReturnQuantity($quantity['purchaseReturnQuantity']);
        $purchaseItem->setSalesQuantity($quantity['salesQuantity']);
        $purchaseItem->setSalesReturnQuantity($quantity['salesReturnQuantity']);
        $purchaseItem->setProductionExpenseQuantity($quantity['productionExpenseQuantity']);
        $purchaseItem->setProductionExpenseReturnQuantity($quantity['productionExpenseReturnQuantity']);
        $purchaseItem->setDamageQuantity($quantity['damageQuantity']);
        $purchaseItem->setRemainingQuantity($quantity['quantity']);
        $em->flush();
    }

    public function salesItemConsumtion(SalesItem $salesItem, ProductionBatchItem $batchItem , $quantity){

        $em = $this->_em;

        $openting = $this->getItemOpeningSummary($salesItem->getStockItem());

        /* @var  $item Item */
        $item = $salesItem->getStockItem();

        /* @var  $entity StockItem */

        $entity = new StockItem();
        $exist = $this->findOneBy(array('productionBatchItem' => $batchItem ,'item' => $item ,'salesItem' => $salesItem ,'mode' => 'sales'));
        if($exist){ $entity = $exist; }
        $entity->setQuantity('-'.$quantity);
        $entity->setSalesQuantity($quantity);
        $entity->setStockItem($item);
        $entity->setIssueDate($batchItem->getBatch()->getIssueDate());
        $entity->setPrice($item->getSalesPrice());
        $entity->setPurchasePrice($item->getProductionPrice());
        $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
        $entity->setTotal($entity->getSubTotal());
        $entity->setMode('sales');
        $entity->setProductionBatchItem($batchItem);
        $entity->setSalesItem($salesItem);
        $entity->setSales($salesItem->getSales());
        if($entity->getSales()->getMode() == 'foreign'){
            $entity->setRemark('Export');
        }else{
            $entity->setRemark('Sales');
        }
        $entity->setProcess('approved');
        if($openting['openingQuantity'] > 0){
            $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
            $entity->setOpeningBalance(floatval($openting['openingBalance']));
        }else{
            $entity->setOpeningQuantity(0);
            $entity->setOpeningBalance(0);
        }
        $entity->setConfig($item->getStockItem()->getConfig());
        $em->persist($entity);
        $em->flush();
        $this->itemUpdateClosingBalance($entity);

        $qb = $this->createQueryBuilder('stock');
        $qb->addSelect('SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity','SUM(stock.damageQuantity) as damageQuantity');
        $qb->where("stock.productionBatchItem = :batchItem");
        $qb->setParameter('batchItem', $batchItem->getId());
        $qb->andWhere('stock.process IN(:process)');
        $qb->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();

        $batchItem->setSalesQuantity($quantity['salesQuantity']);
        $batchItem->setSalesReturnQuantity($quantity['salesReturnQuantity']);
        $batchItem->setSalesDamageQuantity($quantity['damageQuantity']);
        $batchItem->setStockQuantity($quantity['quantity']);
        $em->flush();

    }

    public function processSalesReturnStockQuantity(SalesReturnItem $salesReturnItem, $quantity){

        $em = $this->_em;
        $reminQnt = $quantity;

        /* @var $stockItem StockItem */

        foreach ($salesReturnItem->getSalesItem()->getStockItems() as $stockItem ){

            if($stockItem->getSalesQuantity() >= $reminQnt and $reminQnt > 0){

                $openting = $this->getItemOpeningSummary($salesReturnItem->getStockItem());

                $entity = new StockItem();

                $exist = $this->findOneBy(array('salesReturnItem' => $salesReturnItem ,'item' => $stockItem->getStockItem() ,'salesItem' => $stockItem->getSalesItem(),'productionBatchItem' => $stockItem->getProductionBatchItem() , 'mode' => 'sales-return'));
                if($exist){ $entity = $exist; }
                $entity->setQuantity($reminQnt);
                $entity->setSalesReturnQuantity($entity->getQuantity());
                $entity->setPrice($stockItem->getSalesPrice());
                $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
                $entity->setTotal($entity->getSubTotal());
                $entity->setStockItem($stockItem->getStockItem());
                $entity->setProductionBatchItem($stockItem->getProductionBatchItem());
                $entity->setSalesItem($stockItem->getSalesItem());
                $entity->setSalesReturnItem($salesReturnItem);
                $entity->setIssueDate($salesReturnItem->getSalesReturn()->getIssueDate());
                $entity->setMode('sales-return');
                $entity->setRemark('Credit-note');
                $entity->setProcess('approved');
                if($openting['openingQuantity'] > 0){
                    $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
                    $entity->setOpeningBalance(floatval($openting['openingBalance']));
                }else{
                    $entity->setOpeningQuantity(0);
                    $entity->setOpeningBalance(0);
                }
                $entity->setConfig($entity->getStockItem()->getConfig());
                $em->persist($entity);
                $em->flush();
                $em->getRepository('TerminalbdProductionBundle:ProductionBatchItem')->updateBatchSalesReturnItem($stockItem->getProductionBatchItem());
                $this->itemUpdateClosingBalance($entity);
                $reminQnt = 0;
                break;

            }elseif( $stockItem->getSalesQuantity() > 0 and $stockItem->getSalesQuantity() < $reminQnt){

                $openting = $this->getItemOpeningSummary($salesReturnItem->getStockItem());
                $entity = new StockItem();
                $exist = $this->findOneBy(array('salesReturnItem' => $salesReturnItem ,'item' => $stockItem->getStockItem() ,'salesItem' => $stockItem->getSalesItem(),'productionBatchItem'=> $stockItem->getProductionBatchItem() , 'mode' => 'sales-return'));
                if($exist){ $entity = $exist; }
                $entity->setQuantity($stockItem->getSalesQuantity());
                $entity->setSalesReturnQuantity($entity->getQuantity());
                $entity->setPrice($stockItem->getSalesPrice());
                $entity->setSubTotal($entity->getQuantity() * $entity->getPrice());
                $entity->setTotal($entity->getSubTotal());
                $entity->setStockItem($stockItem->getStockItem());
                $entity->setProductionBatchItem($stockItem->getProductionBatchItem());
                $entity->setSalesItem($stockItem->getSalesItem());
                $entity->setSalesReturnItem($salesReturnItem);
                $entity->setIssueDate($salesReturnItem->getSalesReturn()->getIssueDate());
                $entity->setMode('sales-return');
                $entity->setRemark('Credit-note');
                $entity->setProcess('approved');
                if($openting['openingQuantity'] > 0){
                    $entity->setOpeningQuantity(floatval($openting['openingQuantity']));
                    $entity->setOpeningBalance(floatval($openting['openingBalance']));
                }else{
                    $entity->setOpeningQuantity(0);
                    $entity->setOpeningBalance(0);
                }
                $entity->setConfig($salesReturnItem->getStockItem()->getConfig());
                $em->persist($entity);
                $em->flush();
                $em->getRepository('TerminalbdProductionBundle:ProductionBatchItem')->updateBatchSalesReturnItem($stockItem->getProductionBatchItem());
                $this->itemUpdateClosingBalance($entity);
                $remin = ($reminQnt - $salesReturnItem->getSalesQuantity());
                $reminQnt = $remin;
                if($reminQnt == 0){
                    break;
                }

            }
        }

    }

    public function getBranchStock(Item $particular, $branch = ''){

        $qb = $this->createQueryBuilder('stock');
        $qb->select('SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity','SUM(stock.branchIssueQuantity) as branchIssueQuantity','SUM(stock.branchIssueReturnQuantity) as branchIssueReturnQuantity','SUM(stock.damageQuantity) as damageQuantity');
        $qb->where("stock.item = :item")->setParameter('item', $particular->getId());
        $qb->andWhere('stock.process IN(:process)')->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        $currentStock = (($particular->getRemainingQuantity() + $quantity['branchIssueReturnQuantity']) -$quantity['branchIssueQuantity']);
        return $currentStock;

    }

    public function getBranchSalesStock(Item $particular, $branch = ''){

        $qb = $this->createQueryBuilder('stock');
        $qb->select('SUM(stock.productionStockQuantity) as productionStockQuantity','SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity','SUM(stock.branchIssueQuantity) as branchIssueQuantity','SUM(stock.branchIssueReturnQuantity) as branchIssueReturnQuantity','SUM(stock.damageQuantity) as damageQuantity');
        $qb->where("stock.item = :item")->setParameter('item', $particular->getId());
        $qb->andWhere("stock.branch = :branch")->setParameter('branch', $branch);
        $qb->andWhere('stock.process IN(:process)')->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        $currentStock = ($quantity['branchIssueQuantity'] - ($quantity['salesQuantity'] + $quantity['branchIssueReturnQuantity']));
        return $currentStock;

    }

    public function getInputTax(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.purchaseItem','purchaseItem');
        $qb->join('stock.taxReturnNote','purchaseInputTax');
        $qb->select('SUM(stock.subTotal) as subTotal','SUM(stock.valueAddedTax) as vat');
        $qb->addSelect('purchaseInputTax.id as purchaseInputTaxId','purchaseInputTax.noteNo as noteNo','purchaseInputTax.slug as taxSlug');
        $qb->where("stock.config = :config")->setParameter('config', "{$inventory->getId()}");
        $qb->andWhere('stock.mode = :mode')->setParameter('mode','purchase');
        $qb->andWhere('stock.process = :process')->setParameter('process','approved');
        // $qb->andWhere('purchaseInputTax.noteNo IN (:notes)')->setParameter('notes',array(10,11,12,13,14,15,16,17,18));
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $qb->groupBy('purchaseInputTax.id');
        $result =  $qb->getQuery()->getArrayResult();
        foreach ($result as $row):
            $arrs[$row['noteNo']] = $row;
        endforeach;
        return $arrs;
    }

    public function getInputNotVat(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.purchaseItem','purchaseItem');
        $qb->join('stock.taxReturnNote','purchaseInputTax');
        $qb->select('SUM(stock.subTotal) as subTotal','SUM(stock.valueAddedTax) as vat');
        $qb->addSelect('purchaseInputTax.id as purchaseInputTaxId','purchaseInputTax.noteNo as noteNo','purchaseInputTax.slug as taxSlug');
        $qb->where("stock.config = :config")->setParameter('config', "{$inventory->getId()}");
        $qb->andWhere('stock.mode = :mode')->setParameter('mode','purchase');
        $qb->andWhere('stock.process = :process')->setParameter('process','approved');
        $qb->andWhere('purchaseInputTax.noteNo IN (:notes)')->setParameter('notes',array(19,20,21,22));
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $qb->groupBy('purchaseInputTax.id');
        $result =  $qb->getQuery()->getArrayResult();
        foreach ($result as $row):
            $arrs[$row['noteNo']] = $row;
        endforeach;
        return $arrs;
    }

    public function getTotalInputTax(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.taxReturnNote','purchaseInputTax');
        $qb->select('SUM(stock.subTotal) as subTotal','SUM(stock.valueAddedTax) as vat','SUM(stock.supplementaryDuty) as sd','SUM(stock.advanceTax) as at');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.mode = :mode')->setParameter('mode','purchase');
        $qb->andWhere('stock.process = :process')->setParameter('process','approved');
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function getTotalInputVat(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);

        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.taxReturnNote','purchaseInputTax');
        $qb->select('SUM(stock.valueAddedTax) as vat','SUM(stock.supplementaryDuty) as sd');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.mode = :mode')->setParameter('mode','purchase');
        $qb->andWhere('stock.process = :process')->setParameter('process','approved');
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function getOutputTax(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.salesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.nbrSupplyOutputTax','outputTax');
        $qb->select('SUM(salesItem.subTotal) as subTotal','SUM(salesItem.supplementaryDuty) as sd','SUM(salesItem.valueAddedTax) as vat');
        $qb->addSelect('outputTax.noteNo as noteNo','outputTax.id as outputTaxId');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.process IN(:process)')->setParameter('process',array_values(array('approved')));
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $qb->groupBy('outputTax.id');
        $result =  $qb->getQuery()->getArrayResult();
        foreach ($result as $row):
            $arrs[$row['noteNo']] = $row;
        endforeach;
        return $arrs;

    }

    public function getOutputRebateTax(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.salesItem','salesItem');
        $qb->select('SUM(salesItem.rebateSd) as sd','SUM(salesItem.rebateVat) as vat','SUM(salesItem.rebateAt) as at','SUM(salesItem.vatRefundForSales) as refundVat');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.process = :process')->setParameter('process','approved');
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getOneOrNullResult();
        return $result;

    }

    public function getTotalOutputTax(Inventory $inventory, TaxReturn $taxReturn)
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.salesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.nbrSupplyOutputTax','outputTax');
        $qb->select('SUM(salesItem.subTotal) as subTotal','SUM(salesItem.supplementaryDuty) as sd','SUM(salesItem.valueAddedTax) as vat');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.process IN(:process)')->setParameter('process',array_values(array('approved')));
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function getOutputTaxSubForm(Inventory $inventory, TaxReturn $taxReturn,Setting $setting )
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item','item');
        $qb->leftJoin('item.masterItem','masterItem');
        $qb->leftJoin('masterItem.taxTariff','taxTariff');
        $qb->join('stock.salesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.nbrSupplyOutputTax','outputTax');
        $qb->select('salesItem.name as name','salesItem.totalQuantity as quantity','salesItem.tradeCategory as tradeCategory','salesItem.uom as uom','salesItem.subTotal as subTotal','salesItem.supplementaryDuty as sd','salesItem.valueAddedTax as vat');
        $qb->addSelect('item.name as itemName');
        $qb->addSelect('taxTariff.name as hsName','taxTariff.hsCode as hsCode');
        $qb->addSelect('sales.narration as narration');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.process =:process')->setParameter('process','approved');
        $qb->andWhere('salesItem.nbrSupplyOutputTax =:output')->setParameter('output',$setting->getId());
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getOutputTaxSubFormKha(Inventory $inventory, TaxReturn $taxReturn,Setting $setting )
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item','item');
        $qb->leftJoin('item.masterItem','masterItem');
        $qb->leftJoin('masterItem.taxTariff','taxTariff');
        $qb->join('stock.salesItem','salesItem');
        $qb->join('salesItem.sales','sales');
        $qb->join('salesItem.nbrSupplyOutputTax','outputTax');
        $qb->select('SUM(salesItem.subTotal) as subTotal','SUM(salesItem.supplementaryDuty) as sd','SUM(salesItem.valueAddedTax) as vat');
        $qb->addSelect('item.name as itemName');
        $qb->addSelect('taxTariff.name as hsName','taxTariff.hsCode as hsCode');
        $qb->addSelect('sales.narration as narration');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.process =:process')->setParameter('process','approved');
        $qb->andWhere('salesItem.nbrSupplyOutputTax =:output')->setParameter('output',$setting->getId());
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function getInputTaxSubForm(Inventory $inventory, TaxReturn $taxReturn,Setting $setting )
    {
        $arrs = array();
        $dataEx = explode('-',$taxReturn->getTaxPeriod());
        $date = strtotime("{$dataEx[1]}-{$dataEx[0]}-01");
        $startDate = date('Y-m-01 00:00:00',$date);
        $endDate = date('Y-m-t 23:59:59',$date);
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.item','item');
        $qb->leftJoin('item.masterItem','masterItem');
        $qb->leftJoin('masterItem.taxTariff','taxTariff');
        $qb->join('stock.taxReturnNote','outputTax');
        $qb->select('SUM(stock.subTotal) as subTotal','SUM(stock.supplementaryDuty) as sd','SUM(stock.valueAddedTax) as vat');
        $qb->addSelect('item.name as itemName');
        $qb->addSelect('taxTariff.name as hsName','taxTariff.hsCode as hsCode');
        $qb->addSelect('stock.remark as narration');
        $qb->where("stock.config = :config")->setParameter('config', $inventory->getId());
        $qb->andWhere('stock.process =:process')->setParameter('process','approved');
        $qb->andWhere('stock.mode =:mode')->setParameter('mode','purchase');
        $qb->andWhere('stock.taxReturnNote =:output')->setParameter('output',$setting->getId());
        if ($startDate) {
            $qb->andWhere("stock.issueDate >= :startDate")->setParameter('startDate',$startDate);
        }
        if ($endDate) {
            $qb->andWhere("stock.issueDate <= :endDate")->setParameter('endDate',$endDate);
        }
        $result =  $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function  getCurrentBatchItems(Item $item,$url)
    {
        $select = "";
        $qb = $this->createQueryBuilder('stock');
        $qb->select('productionBatchItem.id as id','SUM(stock.quantity) as stockQuantity','batch.invoice as invoice');
        $qb->join("stock.productionBatchItem","productionBatchItem");
        $qb->join("productionBatchItem.batch","batch");
        $qb->where("stock.item = :item");
        $qb->setParameter('item', $item->getId());
        $qb->having('stockQuantity > 0');
        $qb->groupBy('productionBatchItem.id');
        $qb->orderBy('batch.id','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $select .= '<select name="productionBatch" id="productionBatch" data-action="'.$url.'" class="form-control form-control-lg batchItem" style="width: 100%" >';
        $select .= " <option value=''>-- Select a production batch --</option>";
        if($result){
            foreach ($result as $row):
                $quantity = round($row['stockQuantity'],3);
                $select .= "<option data-id='{$row['stockQuantity']}'  value='{$row['id']}'>{$row['invoice']} => {$quantity}</option>";
            endforeach;
        }
        $select .="</select>";
        return $select;

    }

    public function getProductionBatchBranchRemainingQuantity(ProductionBatchItem $item){

        $id  = $item->getId();
        $total = $this->createQueryBuilder('e')
            ->select('SUM(e.quantity) as remainingQuantity')
            ->where('e.productionBatchItem = :entity')
            ->setParameter('entity',$item->getId())
            ->getQuery()->getSingleScalarResult();
        return $total;
    }

}
