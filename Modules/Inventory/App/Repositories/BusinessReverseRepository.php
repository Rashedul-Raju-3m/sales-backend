<?php

namespace Modules\Inventory\App\Repositories;

use Modules\Inventory\App\Entities\BusinessInvoice;
use Modules\Inventory\App\Entities\BusinessPurchase;
use Modules\Inventory\App\Entities\BusinessReverse;
use Appstore\Bundle\RestaurantBundle\Entity\Invoice;
use Appstore\Bundle\RestaurantBundle\Entity\InvoiceParticular;
use Appstore\Bundle\RestaurantBundle\Entity\Particular;
use Appstore\Bundle\RestaurantBundle\Entity\Purchase;
use Appstore\Bundle\RestaurantBundle\Entity\PurchaseItem;
use Appstore\Bundle\RestaurantBundle\Entity\RestaurantConfig;
use Doctrine\ORM\EntityRepository;


/**
 * ParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessReverseRepository extends EntityRepository
{
	public function purchaseReverse(BusinessPurchase $entity,$data)
	{
		if(empty($entity->getBusinessReverse())){
			$reverse = New BusinessReverse();
		}else{
			$reverse = $entity->getBusinessReverse();
		}
		$reverse->setBusinessConfig($entity->getBusinessConfig());
		$reverse->setProcess('purchase');
		$reverse->setContent($data);
		$reverse->setBusinessPurchase($entity);
		$this->_em->persist($reverse);
		$this->_em->flush($reverse);

	}
	public function salesReverse(BusinessInvoice $entity,$data)
	{

		if(empty($entity->getBusinessReverse())){
			$reverse = New BusinessReverse();
		}else{
			$reverse = $entity->getBusinessReverse();
		}
		$reverse->setBusinessConfig($entity->getBusinessConfig());
		$reverse->setProcess('sales');
		$reverse->setContent($data);
		$reverse->setBusinessInvoice($entity);
		$this->_em->persist($reverse);
		$this->_em->flush($reverse);

	}


}
