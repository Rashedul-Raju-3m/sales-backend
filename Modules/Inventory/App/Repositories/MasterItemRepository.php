<?php

namespace Modules\Inventory\App\Repositories;
use Doctrine\ORM\EntityRepository;


/**
 * ItemTypeGroupingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MasterItemRepository extends EntityRepository
{

    /**
     * @param $qb
     * @param $data
     */

    protected function handleWithSearch($qb,$data)
    {
        if(!empty($data))
        {
            $item = isset($data['item'])? $data['item'] :'';
            $color = isset($data['color'])? $data['color'] :'';
            $size = isset($data['size'])? $data['size'] :'';
            $vendor = isset($data['vendor'])? $data['vendor'] :'';
            $brand = isset($data['brand'])? $data['brand'] :'';
            $category = isset($data['category'])? $data['category'] :'';
            $unit = isset($data['unit'])? $data['unit'] :'';
            $barcode = isset($data['barcode'])? $data['barcode'] :'';

            if (!empty($barcode)) {

                $qb->join('e.purchaseItem', 'p');
                $qb->andWhere("p.barcode = :barcode");
                $qb->setParameter('barcode', $barcode);
            }

            if (!empty($item)) {
                $qb->andWhere("m.name = :name");
                $qb->setParameter('name', $item);
            }
            if (!empty($color)) {
                $qb->join('item.color', 'c');
                $qb->andWhere("c.name = :color");
                $qb->setParameter('color', $color);
            }
            if (!empty($size)) {
                $qb->join('item.size', 's');
                $qb->andWhere("s.name = :size");
                $qb->setParameter('size', $size);
            }
            if (!empty($vendor)) {
                $qb->join('item.vendor', 'v');
                $qb->andWhere("v.companyName = :vendor");
                $qb->setParameter('vendor', $vendor);
            }

            if (!empty($brand)) {
                $qb->join('item.brand', 'b');
                $qb->andWhere("b.name = :brand");
                $qb->setParameter('brand', $brand);
            }

            if (!empty($category)) {
                $qb->join('m.category','cat');
                $qb->andWhere("cat.name = :category");
                $qb->setParameter('category', $category);
            }

            if (!empty($unit)) {
                $qb->join('m.productUnit','u');
                $qb->andWhere("b.name = :unit");
                $qb->setParameter('unit', $unit);
            }

        }

    }

    public function insertInstantMasterItem(Inventory $inventory,$data)
    {
        $em =  $this->_em;
        $name = $data['masterItem'];
        $existMasterItem = $this->findOneBy(array('config' => $inventory,'name'=>$name));
        if($existMasterItem){

            return $existMasterItem;

        }else{

            $post = new MasterItem();
            $post->setConfig($inventory);
            $productGroup = $em->getRepository(Setting::class)->findOneBy(array('name' => $data['productGroup']));
            if ($productGroup) {
                $post->setProductGroup($productGroup);
            }
            $post->setName($data['masterItem']);
            $hsCode = $data['hsCode'];
            $post->setHsCode($hsCode);
            $unit =$em->getRepository(ProductUnit::class)->findOneBy(array('name' => $data['unit']));
            if ($unit) {
                $post->setUnit($unit);
            }
            $em->persist($post);
            $em->flush();
            if($hsCode){
                $this->updateTaxValue($post);
            }
            return $post;
        }

    }

    public function updateTaxValue(MasterItem $entity){

        $em=  $this->_em;
        $tax = $em->getRepository('TerminalbdNbrvatBundle:TaxTariff')->findOneBy(array('hsCode'=> $entity->getHsCode()));
        if($tax){
            $entity->setTaxTariff($tax);
            $entity->setCustomsDuty($tax->getCustomsDuty());
            $entity->setSupplementaryDuty($tax->getSupplementaryDuty());
            $entity->setRecurringDeposit($tax->getRecurringDeposit());
            $entity->setRegulatoryDuty($tax->getRegulatoryDuty());
            $entity->setValueAddedTax($tax->getValueAddedTax());
            $entity->setAdvanceTradeVat($tax->getAdvanceTradeVat());
            $entity->setAdvanceIncomeTax($tax->getAdvanceIncomeTax());
            $entity->setAdvanceTax($tax->getAdvanceTax());
            $em->persist($entity);
            $em->flush();
        }

    }

    public function modeWiseStockItem($inventory,$modes = array(),$data = array())
    {

        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.productGroup','g');
        $qb->leftJoin('item.unit','u');
        $qb->select('item.id as id','item.name as name','u.name as uom');
        $qb->where("item.config = :inventory")->setParameter('inventory', $inventory);
        $qb->andWhere("g.slug IN (:slugs)")->setParameter('slugs',$modes);
        $this->handleWithSearch($qb,$data);
        $qb->orderBy('item.name','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function filterFrontendProductWithSearch($data , $limit = 0)
    {
        if (!empty($data['sortBy'])) {

            $sortBy = explode('=?=', $data['sortBy']);
            $sort = $sortBy[0];
            $order = $sortBy[1];
        }

        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin("product.masterItem",'masterItem');
        $qb->leftJoin('product.goodsItems','goodsitems');
        $qb->where("product.isWeb = 1");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!empty($data['brand'])) {
            $qb->andWhere("product.brand IN(:brand)");
            $qb->setParameter('brand',$data['brand']);
        }

        if (!empty($data['size'])) {
            $qb->andWhere("goodsitems.size IN(:size)");
            $qb->setParameter('size',$data['size']);
        }

        if (!empty($data['color'])) {
            $qb->leftJoin('goodsitems.colors','colors');
            $qb->andWhere("colors.id IN(:color)");
            $qb->setParameter('color',$data['color']);
        }

        if (!empty($data['promotion'])) {
            $qb->andWhere("product.promotion IN(:promotion)");
            $qb->setParameter('promotion',$data['promotion']);
        }

        if (!empty($data['tag'])) {
            $qb->andWhere("product.tag IN(:tag)");
            $qb->setParameter('tag',$data['tag']);
        }

        if (!empty($data['discount'])) {
            $qb->andWhere("product.discount IN(:discount)");
            $qb->setParameter('discount',$data['discount']);
        }

        if (!empty($data['priceStart'])) {
            $qb->andWhere(' product.salesPrice >= :priceStart');
            $qb->setParameter('priceStart',$data['priceStart']);
        }

        if (!empty($data['priceEnd'])) {
            $qb->andWhere(' product.salesPrice <= :priceEnd');
            $qb->setParameter('priceEnd',$data['priceEnd']);
        }

        if (empty($data['sortBy'])){
            $qb->orderBy('product.updated', 'DESC');
        }else{
            $qb->orderBy($sort ,$order);
        }
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $res = $qb->getQuery();
        return  $res;

    }

    public function getFeatureCategoryProduct($inventory,$data,$limit){


        $qb = $this->createQueryBuilder('product');
        $qb->leftJoin("product.masterItem",'masterItem');
        $qb->leftJoin('product.goodsItems','goodsitems');
        $qb->where("product.isWeb = 1");
        $qb->andWhere("product.status = 1");
        $qb->andWhere("product.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!empty($data['brand'])) {
            $qb->andWhere("product.brand IN(:brand)");
            $qb->setParameter('brand',$data['brand']);
        }
        if (!empty($data['promotion'])) {
            $qb->andWhere("product.promotion IN(:promotion)");
            $qb->setParameter('promotion',$data['promotion']);
        }

        if (!empty($data['tag'])) {
            $qb->andWhere("product.tag IN(:tag)");
            $qb->setParameter('tag',$data['tag']);
        }

        if (!empty($data['discount'])) {
            $qb->andWhere("product.discount IN(:discount)");
            $qb->setParameter('discount',$data['discount']);
        }

        if (!empty($data['category'])) {

            $qb
                ->join('masterItem.category', 'category')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->like('category.path', "'". intval($data['category']) . "/%'"),
                        $qb->expr()->like('category.path', "'%/" . intval($data['category']) . "/%'")
                    )
                );
        }
        $qb->orderBy('product.updated', 'DESC');
        if($limit > 0 ) {
            $qb->setMaxResults($limit);
        }
        $res = $qb->getQuery();
        return  $res;
    }


    public  function getSumPurchaseItem($inventory , $excelImporter = ''){

        $qb = $this->createQueryBuilder('item');
        $qb->join('item.purchaseItems', 'pItem');
        $qb->join('pItem.purchase', 'purchase');
        $qb->select('item.id as id');
        $qb->addSelect('SUM(pItem.quantity) as quantity ');
        $qb->where("purchase.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $qb->where("purchase.process = :process");
        $qb->setParameter('process', 'imported');

        $qb->groupBy('item.id');
        $result = $qb->getQuery()->getResult();
        foreach ($result as $row ){
            $entity = $this->find($row['id']);
            $entity->setPurchaseQuantity($row['quantity']);
            $this->_em->persist($entity);
            $this->_em->flush($entity);
        }

    }

    public function checkDuplicateSKU($config,$data)
    {


        $type = $data['item']['productType'];
        $masterItem = $data['item']['name'];
        $vendor     = isset($data['item']['vendor']) ? $data['item']['vendor'] :'NULL';
        $brand  = isset($data['item']['brand']) ? $data['item']['brand']:'NULL';
        $category  = isset($data['item']['brand']) ? $data['item']['category']:'NULL';

        $qb = $this->createQueryBuilder('e');
        $qb->select('COUNT(e.id) countid');
        $qb->where("e.config = :config");
        $qb->setParameter('config', $config);
        $qb->andWhere("e.productType = :type")->setParameter('type', $type);
        $qb->andWhere("e.name = :name")->setParameter('name', $masterItem);
        if($category){
            $qb->andWhere("e.category = :category")->setParameter('category', $category);
        }
        if($vendor){
            $qb->andWhere("e.vendor = :vendor")->setParameter('vendor', $vendor);
        }
        if($brand){
            $qb->andWhere("e.brand = :brand")->setParameter('brand', $brand);
        }
        $count = $qb->getQuery()->getOneOrNullResult();
        $result = $count['countid'];
        return $result;

    }


    public function findWithSearch( $config, $parameter , $data ): array
    {


        if (!empty($parameter['orderBy'])) {
            $sortBy = $parameter['orderBy'];
            $order = $parameter['order'];
        }


        $item               = isset($data['name'])? $data['name'] :'';
        $productGroup       = isset($data['groupName'])? $data['groupName'] :'';
        $productType        = isset($data['productType'])? $data['productType'] :'';
        $category           = isset($data['category'])? $data['category'] :'';
        $barcode           = isset($data['barcode'])? $data['barcode'] :'';
        $qb = $this->createQueryBuilder('item');
        $qb->leftJoin('item.brand','brand');
        $qb->leftJoin('item.inputTax','inputTax');
        $qb->leftJoin('item.productGroup','productGroup');
        $qb->leftJoin('item.productType','type');
        $qb->leftJoin('item.category','category');
        $qb->leftJoin('item.unit','unit');
        $qb->select("item.id as id","item.name as name","item.hsCode as hsCode","item.barcode as barcode","item.sku as sku");
        $qb->addSelect('item.valueAddedTax as vat','item.customsDuty as cd','item.supplementaryDuty as sd','item.advanceIncomeTax as ait','item.advanceTax as at','item.advanceTradeVat as atv','item.regulatoryDuty as rd','item.vatDeductionSource as vds','item.rebate as rebate');
        $qb->addSelect("unit.name as unitName");
        $qb->addSelect("type.name as productType");
        $qb->addSelect("productGroup.name as groupName");
        $qb->addSelect("brand.name as brandName");
        $qb->addSelect("category.name as categoryName");
     //   $qb->addSelect("inputTax.name as categoryName");
        $qb->where("item.status IS NOT NULL");
        $qb->andWhere("item.config = :config")->setParameter('config', $config);
        if (!empty($item)) {
            $qb->andWhere("item.name LIKE :name")->setParameter('name', "%{$item}%");
        }
        if (!empty($category)) {
            $qb->andWhere("category.name LIKE :c")->setParameter('c', "%{$category}%");
        }
        if (!empty($barcode)) {
            $qb->andWhere("p.barcode LIKE :barcode")->setParameter('barcode', "%{$barcode}%");
        }
        if (!empty($productGroup)) {
            $qb->andWhere("productGroup.id = :pid")->setParameter('pid', $productGroup);
        }
        if (!empty($productType)) {
            $qb->andWhere("type.id = :tid")->setParameter('tid', $productType);
        }

        $qb->setFirstResult($parameter['offset']);
        $qb->setMaxResults($parameter['limit']);
        if ($parameter['orderBy']){
            $qb->orderBy($sortBy, $order);
        }else{
            $qb->orderBy('item.name', 'DESC');
        }
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

	public function depreciationGenerate($data)
	{

		$item = isset($data['item'])? $data['item'] :'';
		$category = isset($data['category'])? $data['category'] :'';

		$qb = $this->createQueryBuilder('item');
		$qb->where("item.status IS NOT NULL");
		if (!empty($item)) {
			$qb->join('item.item', 'm');
			$qb->andWhere("m.id = :name");
			$qb->setParameter('name', $item);
		}
		if (!empty($category)) {
			$qb->join('item.category', 'c');
			$qb->andWhere("c.id = :category");
			$qb->setParameter('category', $category);
		}
		$qb->orderBy('item.updated','DESC');
		$qb->getQuery();
		return  $qb;

	}

    public function getInventoryExcel($inventory,$data){

        $item = isset($data['item'])? $data['item'] :'';
        $gpSku = isset($data['gpSku'])? $data['gpSku'] :'';
        $category = isset($data['category'])? $data['category'] :'';
        $brand = isset($data['brand'])? $data['brand'] :'';

        $qb = $this->createQueryBuilder('item');
        $qb->join('item.masterItem', 'm');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);

        if (!empty($item)) {

            $qb->andWhere("m.name = :name");
            $qb->setParameter('name', $item);
        }
        if (!empty($gpSku)) {
            $qb->andWhere($qb->expr()->like("item.gpSku", "'%$gpSku%'"  ));
        }
        if (!empty($category)) {
            $qb->join('m.category', 'c');
            $qb->andWhere("c.name = :category");
            $qb->setParameter('category', $category);
        }
        if (!empty($brand)) {
            $qb->join('m.brand', 'b');
            $qb->andWhere("b.name = :brand");
            $qb->setParameter('brand', $brand);
        }
        $qb->orderBy('item.gpSku','ASC');
        $result = $qb->getQuery()->getResult();
        return  $result;
    }

    public function getLastId($inventory)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(item.id)');
        $qb->from('InventoryBundle:Item','item');
        $qb->where("item.inventoryConfig = :inventory");
        $qb->setParameter('inventory', $inventory);
        $count = $qb->getQuery()->getSingleScalarResult();
        if($count > 0 ){
         return $count+1;
        }else{
         return 1;
        }

    }

    public function searchAutoComplete($item, $config)
    {

        $search = strtolower($item);
        $query = $this->createQueryBuilder('i');
        $query->select('i.id as id');
        $query->addSelect('i.name as name');
        $query->addSelect('i.slug as text');
        $query->addSelect('i.sku as sku');
        $query->addSelect('i.remainingQuantity as remainingQuantity');
        $query->where($query->expr()->like("i.slug", "'$search%'"  ));
        $query->andWhere("i.remainingQuantity > 0 ");
        $query->andWhere("i.config = :config");
        $query->setParameter('config', $config);
        $query->orderBy('i.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }

    public function searchAutoCompleteAllItem($item,  $inventory)
    {

        $search = strtolower($item);
        $query = $this->createQueryBuilder('i');
        $query->join('i.config', 'ic');
        $query->select('i.id as id');
        $query->addSelect('i.name as name');
        $query->addSelect('i.skuSlug as text');
        $query->addSelect('i.sku as sku');
        $query->where($query->expr()->like("i.skuSlug", "'%$search%'"  ));
        $query->andWhere("ic.id = :inventory");
        $query->setParameter('inventory', $inventory);
        $query->groupBy('i.id');
        $query->orderBy('i.name', 'ASC');
        $query->setMaxResults( '30' );
        return $query->getQuery()->getResult();

    }

    public function  getVatMinMax(MasterItem $item)
    {
        $select = "";
        $minVat = $item->getMinValueAddedTax();
        $maxVat = $item->getValueAddedTax();
        if($minVat > 0 ){
            while($minVat <= $maxVat){
                $selected = ($minVat == 15 ) ? "selected='selected'" : '';
                $select .= "<option {$selected} value='{$minVat}'>{$minVat}%</option>";
                $minVat++;
            }
            return $select;
        }else{
            return 'invalid';
        }
    }

    public function  getVatMinMaxForSalesList(SalesItem $salesItem)
    {
        $select = "";
        $vatPercent = $salesItem->getValueAddedTaxPercent();
        $item = $salesItem->getMasterItem();
        $minVat = $item->getMinValueAddedTax();
        $maxVat = $item->getValueAddedTax();
        if($minVat > 0 ){
            $select .="<select class='form-control form-control' id='valueAddedTaxPercent-{$salesItem->getId()}' name='valueAddedTaxPercent'>";
            while($minVat <= $maxVat){
                $selected = ($minVat == $vatPercent ) ? "selected='selected'" : '';
                $select .= "<option {$selected} value='{$minVat}'>{$minVat}%</option>";
                $minVat++;
            }
            $select .="</select>";
            return $select;
        }else{
            return $maxVat;
        }
    }

    public function  getVatMinMaxForBranchList(BranchIssueItem $salesItem)
    {
        $select = "";
        $vatPercent = $salesItem->getValueAddedTaxPercent();
        $item = $salesItem->getMasterItem();
        $minVat = $item->getMinValueAddedTax();
        $maxVat = $item->getValueAddedTax();
        if($minVat > 0 ){
            $select .="<select class='form-control form-control' id='valueAddedTaxPercent-{$salesItem->getId()}' name='valueAddedTaxPercent'>";
            while($minVat <= $maxVat){
                $selected = ($minVat == $vatPercent ) ? "selected='selected'" : '';
                $select .= "<option {$selected} value='{$minVat}'>{$minVat}%</option>";
                $minVat++;
            }
            $select .="</select>";
            return $select;
        }else{
            return $maxVat;
        }
    }



}
