<?php

namespace Modules\Inventory\App\Repositories;
use Modules\Inventory\App\Entities\BusinessDamage;
use Modules\Inventory\App\Entities\BusinessInvoiceReturnItem;
use Modules\Inventory\App\Entities\Product;
use Doctrine\ORM\EntityRepository;


/**
 * HmsVendorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessDamageRepository extends EntityRepository
{

    public function damageStockItemUpdate(Product $item)
    {
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.quantity) AS quantity');
        $qb->where('e.businessParticular = :businessParticular')->setParameter('businessParticular', $item->getId());
        $qnt = $qb->getQuery()->getOneOrNullResult();
        return $qnt['quantity'];
    }

    public function insertSalesReturn(BusinessInvoiceReturnItem $item)
    {
        $em = $this->_em;
        $entity = new BusinessDamage();
        $config = $item->getInvoiceReturn()->getBusinessConfig();
        $entity->setBusinessConfig($config);
        $entity->setBusinessParticular($item->getParticular());
        $entity->setQuantity($item->getQuantity());
        $entity->setPurchasePrice($item->getPrice());
        $entity->setSubTotal($item->getPrice() * $item->getQuantity());
        $entity->setProcess('Approved');
        $entity->setCreatedBy($item->getInvoiceReturn()->getCreatedBy());
        $em->persist($entity);
        $em->flush();
        $em->getRepository('BusinessBundle:BusinessParticular')->updateRemoveStockQuantity($entity->getBusinessParticular(),'damage');
        $em->getRepository('AccountingBundle:Transaction')->insertGlobalDamageTransaction($item->getInvoiceReturn()->getBusinessConfig()->getGlobalOption(),$entity);
    }

}
