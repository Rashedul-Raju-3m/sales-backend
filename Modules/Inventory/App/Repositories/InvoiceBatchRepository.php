<?php

namespace Modules\Inventory\App\Repositories;
use Doctrine\ORM\EntityRepository;
use Modules\Inventory\App\Entities\InvoiceBatchItem;
use Modules\Inventory\App\Entities\InvoiceBatchTransaction;
use Modules\Inventory\App\Entities\StockItem;


/**
 * ItemTypeGroupingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceBatchRepository extends EntityRepository
{
        public function invoiceBatchInsert($batchId)
        {
            $em = $this->_em;
            $batch = $this->find($batchId);
            $qb = $em->createQueryBuilder();
            $qb->from(InvoiceBatchItem::class,'e');
            $qb->select('SUM(e.subTotal) as subTotal');
            $qb->where("e.invoiceBatch = :invoiceBatch")->setParameter('invoiceBatch', $batchId);
            $result = $qb->getQuery()->getOneOrNullResult();
            $batch->setSubTotal($result['subTotal']);
            $em->persist($batch);
            $em->flush();

        }

        public function invoiceBatchDiscountGenerate($batchId)
        {
            $em = $this->_em;
            $batch = $this->find($batchId);
            $qb = $em->createQueryBuilder();
            $qb->from(InvoiceBatchTransaction::class,'e');
            $qb->select('SUM(e.discount) as discount');
            $qb->where("e.invoiceBatch = :invoiceBatch")->setParameter('invoiceBatch', $batchId);
            $result = $qb->getQuery()->getOneOrNullResult();
            $batch->setDiscount($result['discount']);
            $em->persist($batch);
            $em->flush();

        }


}
