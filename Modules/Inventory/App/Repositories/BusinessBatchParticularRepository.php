<?php

namespace Modules\Inventory\App\Repositories;
use Modules\Core\App\Entities\Vendor;
use Modules\Inventory\App\Entities\BusinessConfig;
use Modules\Inventory\App\Entities\BusinessInvoice;
use Modules\Inventory\App\Entities\BusinessInvoiceParticular;
use Modules\Inventory\App\Entities\BusinessParticular;
use Modules\Inventory\App\Entities\BusinessProductionElement;
use Modules\Inventory\App\Entities\BusinessPurchase;
use Modules\Inventory\App\Entities\BusinessPurchaseItem;
useModules\Core\App\Entities\Customer;
use Appstore\Bundle\HospitalBundle\Entity\InvoiceParticular;
use Appstore\Bundle\RestaurantBundle\Entity\ProductionElement;
use Modules\Core\App\Entities\User;
use Doctrine\ORM\EntityRepository;
use Modules\Domain\App\Entities\GlobalOption;


/**
 * BusinessInvoiceParticularRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessBatchParticularRepository extends EntityRepository
{
    public function getFindBatchParticular($config)
    {

        $qb = $this->createQueryBuilder('si');
        $qb->join('si.businessBatch','bb');
        $qb->join('si.salesBy','u');
        $qb->join('si.wearhouse','w');
        $qb->join('si.businessParticular','bp');
        $qb->select('bb.invoice as invoice','bb.created as created');
        $qb->addSelect('si.id as id');
        $qb->addSelect('w.name as station');
        $qb->addSelect('bp.name as itemName');
        $qb->addSelect('u.username as salesBy');
        $qb->where('bb.businessConfig =:config')->setParameter('config', $config);
    //    $qb->andWhere('si.process =:process')->setParameter('process', "approved");
        $qb->orderBy('bb.created','ASC');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }
}
