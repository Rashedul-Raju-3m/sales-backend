<?php

namespace Modules\Production\App\Repositories;
use App\Entity\Application\Production;
use Doctrine\ORM\EntityRepository;
use Terminalbd\InventoryBundle\Entity\Item;
use Modules\Production\App\Entities\ProductionInventory;


/**
 * ProductionElementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionInventoryRepository extends EntityRepository
{


    public function findWithSearch($config,$parameter,$query)
    {
        if (!empty($parameter['orderBy'])) {
            $sortBy = $parameter['orderBy'];
            $order = $parameter['order'];
        }

        $name             = isset($data['name'])? $data['name'] :'';
        $qb = $this->createQueryBuilder('item');
        $qb->select('item.id as id','item.name as name','item.uom as uom','item.quantity as quantity','item.issueQuantity as issueQuantity',"item.damageQuantity as damageQuantity","item.returnQuantity as returnQuantity","item.remainigQuantity as remainigQuantity");
        $qb->where("item.config = :config")->setParameter('config', $config);
        if (!empty($item)) {
            $qb->andWhere("item.name LIKE :name")->setParameter('name', "%{$invoice}%");
        }
        $qb->setFirstResult($parameter['offset']);
        $qb->setMaxResults($parameter['limit']);
        if ($parameter['orderBy']){
            $qb->orderBy($sortBy, $order);
        }else{
            $qb->orderBy('item.name', 'DESC');
        }
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }


    public function insertProductionInventory(Production $config,Item $item)
    {

        $em = $this->_em;
        $inventoryItem = $this->findOneBy(array('item'=>$item));
        $productionQnt = $em->getRepository('TerminalbdInventoryBundle:ProductionIssue')->getIssueItem($item);
        if($inventoryItem){
            $entity = $inventoryItem;
        }else{
            $entity = new ProductionInventory();
        }
        $unit = !empty($item->getUnit() && !empty($item->getUnit()->getName())) ? $item->getUnit()->getName():'';
        $entity->setConfig($config);
        $entity->setItem($item);
        $entity->setName($item->getName());
        $entity->setUom($unit);
        $entity->setQuantity($productionQnt);
        $em->persist($entity);
        $em->flush();
        $this->remainingQnt($entity);

    }

    public function remainingQnt(ProductionInventory $stock)
    {
        $em = $this->_em;
        $qnt = ($stock->getIssueQuantity() + $stock->getReturnQuantity()) - ($stock->getDamageQuantity() + $stock->getIssueQuantity());
        $stock->setRemainigQuantity($qnt);
        $em->persist($stock);
        $em->flush();
    }



    public function insertProduction($particular, $data)
    {
        $em = $this->_em;
	    $entity = new BusinessProduction();
	    $entity->setBusinessParticular($particular);
	    $particular = $this->_em->getRepository('BusinessBundle:BusinessParticular')->find($data['particularId']);
	    $entity->setBusinessParticular($particular);
	    $entity->setPurchasePrice($data['purchasePrice']);
	    $entity->setSalesPrice($data['salesPrice']);
	    $entity->setQuantity($data['quantity']);
	    $entity->setPurchaseSubTotal($data['purchasePrice'] * $data['quantity']);
	    $entity->setSalesSubTotal($data['salesPrice'] * $data['quantity']);
	    $em->persist($entity);
	    $em->flush();
    }


    public function particularProductionElements(BusinessParticular $particular)
    {
        $entities = $particular->getProductionElements();
        $data = '';
        $i = 1;

        /* @var $entity BusinessProductionElement */

        foreach ($entities as $entity) {

            $subTotal = $entity->getSalesPrice() * $entity->getQuantity() ;
	        $unit = !empty($entity->getParticular()->getUnit() && !empty($entity->getParticular()->getUnit()->getName())) ? $entity->getParticular()->getUnit()->getName():'Unit';

            $data .= "<tr id='remove-{$entity->getId()}'>";
            $data .= "<td class='span1' >{$i}</td>";
            $data .= "<td class='span1' >{$entity->getParticular()->getParticularCode()}</td>";
            $data .= "<td class='span3' >{$entity->getParticular()->getName()}</td>";
            $data .= "<td class='span1' >{$entity->getPurchasePrice()}</td>";
            $data .= "<td class='span1' >{$entity->getSalesPrice()}</td>";
            $data .= "<td class='span1' >{$entity->getQuantity()}</td>";
            $data .= "<td class='span1' >{$unit}</td>";
            $data .= "<td class='span1' >{$subTotal}</td>";
            $data .= "<td class='span1' ><a id='{$entity->getId()}' data-url='/business/product-production/{$particular->getId()}/{$entity->getId()}/delete' href='javascript:' class='btn red mini delete' ><i class='icon-trash'></i></a></td>";
            $data .= '</tr>';
            $i++;
        }
        return $data;
    }


    public function insertStockProductionItem(BusinessProduction $production)
    {

		$em = $this->_em;
        $particular = $production->getBusinessParticular();
	    $qb = $this->createQueryBuilder('e');
	    $qb->select('SUM(e.quantity) AS quantity');
	    $qb->where('e.businessParticular = :particular')->setParameter('particular', $particular->getId());
	    $qnt = $qb->getQuery()->getOneOrNullResult();
	    $productionQnt = ($qnt['quantity'] == 'NULL') ? 0 : $qnt['quantity'];
        $particular->setPurchaseQuantity($productionQnt);
        $em->persist($particular);
        $em->flush();
		$this->_em->getRepository('BusinessBundle:BusinessParticular')->remainingQnt($particular);
	    $this->productionExpense($production,$particular);
    }


	public function productionExpense(BusinessProduction $production,BusinessParticular  $item)
	{

		if(!empty($item->getProductionElements())){

			$productionElements = $item->getProductionElements();

			/* @var $element BusinessProductionElement */

			if($productionElements) {

				foreach ($productionElements as $element) {

					$entity = new BusinessProductionExpense();
					$entity->setBusinessProduction($production);
					$entity->setProductionItem($item);
					$entity->setProductionElement($element->getParticular());
					$entity->setPurchasePrice($element->getPurchasePrice());
					$entity->setSalesPrice($element->getSalesPrice());
					$entity->setQuantity($element->getQuantity() * $production->getQuantity());
					$this->_em->persist($entity);
					$this->_em->flush();
					$this->_em->getRepository('BusinessBundle:BusinessParticular')->salesProductionQnt($element);
				}
			}
		}
	}

}
