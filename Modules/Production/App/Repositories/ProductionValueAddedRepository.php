<?php

namespace Modules\Production\App\Repositories;
use Doctrine\ORM\EntityRepository;
use Modules\Production\App\Entities\ProductionItem;
use Modules\Production\App\Entities\ProductionItemAmendment;
use Modules\Production\App\Entities\ProductionValueAdded;

/**
 * DamageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionValueAddedRepository extends EntityRepository
{

    public function getProductionAdded(ProductionItem $item)
    {

        $productionValueAddeds = $this->findBy(array('productionItem'=>$item));
        if(empty($productionValueAddeds)){
           $this->initialValueAddedd($item);
        }

    }

    private function initialValueAddedd(ProductionItem $item){

        $em = $this->_em;
        $values = $this->_em->getRepository(Setting::class)->getChildRecords("production-value-added");
        foreach ($values as $value){
            $valueAdded = $em->getRepository('TerminalbdInventoryBundle:Setting')->find($value['id']);
            $entity = new ProductionValueAdded();
            $entity->setValueAdded($valueAdded);
            $entity->setProductionItem($item);
            $entity->setAmount(0);
            $em->persist($entity);
            $em->flush($entity);
        }
    }

    public function insertItemKeyValue(ProductionItem $item , $data)
    {

        $em = $this->_em;
        $i = 0;
        foreach ($data['valueAddedId'] as $value) {
            $amount = $data['amount'][$i];
            $metaId = isset($data['valueAddedId'][$i]) ? $data['valueAddedId'][$i] : 0;

            /* @var  $itemKeyValue ProductionValueAdded */

            $itemKeyValue = $this->find($metaId);
            if ($itemKeyValue and $amount > 0) {
                $itemKeyValue->setAmount($amount);
                $em->flush();
            }
            $i ++;
        }
        $qb = $this->createQueryBuilder('item');
        $qb->select('SUM(item.amount) as amount');
        $qb->where("item.productionItem = :item")->setParameter('item', $item->getId());
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'] > 0 ? $result['amount']:0;

    }

    public function insertAmendmentItemKeyValue(ProductionItemAmendment $item , $data)
    {

        $em = $this->_em;
        $i = 0;
        foreach ($data['valueAddedId'] as $value) {
            $amount = $data['amount'][$i] ? $data['amount'][$i] : 0;
            $metaId = isset($data['valueAddedId'][$i]) ? $data['valueAddedId'][$i] : 0;

            /* @var  $itemKeyValue ProductionValueAdded */

            $itemKeyValue = $this->find($metaId);
            if ($itemKeyValue) {
                $itemKeyValue->setAmount($amount);
                $em->flush();
            }
            $i ++;
        }
        $qb = $this->createQueryBuilder('item');
        $qb->select('SUM(item.amount) as amount');
        $qb->where("item.productionItemAmendment = :item")->setParameter('item', $item->getId());
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result['amount'] > 0 ? $result['amount']:0;

    }

    public function getProductionAmendmentValueAdded(ProductionItemAmendment $amendment,ProductionItem $item)
    {
        $productionValueAddeds = $this->findBy(array('productionItemAmendment' => $amendment));
        if(empty($productionValueAddeds)){
            $this->initialAmendmentValueAddedd($amendment,$item);
        }

    }

    private function initialAmendmentValueAddedd(ProductionItemAmendment $amendment, ProductionItem $item){

        $em = $this->_em;

        /* @var $value ProductionValueAdded */

        foreach ($item->getProductionValueAddeds() as $value){
            $entity = new ProductionValueAdded();
            $entity->setValueAdded($value->getValueAdded());
            $entity->setAmount($value->getAmount());
            $entity->setProductionItemAmendment($amendment);
            $em->persist($entity);
            $em->flush();
        }
    }

    public function checkValueAddedes(ProductionItem $item)
    {

        $em = $this->_em;
        $i = 0;
        $qb = $this->createQueryBuilder('item');
        $qb->join('item.productionItem','p');
        $qb->join('item.valueAdded','v');
        $qb->where("p.id = :pid")->setParameter('pid', $item->getId());
        $qb->andWhere("item.amount > 0");
        $qb->orderBy("v.ordering","ASC");
        $result = $qb->getQuery()->getResult();
        return $result;

    }

}
