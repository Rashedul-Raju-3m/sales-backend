<?php

namespace Modules\Production\App\Repositories;
use Doctrine\ORM\EntityRepository;
use Modules\Production\App\Entities\Item;
use Modules\Production\App\Entities\ProductionStock;
use Modules\Production\App\Entities\ProductionWorkOrder;
use Modules\Production\App\Entities\ProductionWorkOrderItem;

/**
 * eRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionWorkOrderRepository extends EntityRepository
{

    public function findWithSearch( $config, $parameter , $data ): array
    {


        if (!empty($parameter['orderBy'])) {
            $sortBy = $parameter['orderBy'];
            $order = $parameter['order'];
        }
        $startDate = isset($data['startDate'])  ? $data['startDate'].' 00:00:00' :'';
        $endDate =   isset($data['endDate'])  ? $data['endDate'].' 23:59:59' :'';


        $qb = $this->createQueryBuilder('e');
        $qb->select('e.id as id','e.created as created','e.issueDate as issueDate','e.invoice as invoice', 'e.process as process', 'e.requsitionNo as requsitionNo');
        $qb->where("e.config = :config")->setParameter('config', $config);
        $qb->setFirstResult($parameter['offset']);
        $qb->setMaxResults($parameter['limit']);
        if ($parameter['orderBy']){
            $qb->orderBy($sortBy, $order);
        }else{
            $qb->orderBy('e.created', 'DESC');
        }
        $result = $qb->getQuery()->getArrayResult();
        return  $result;

    }

    public function insertUpdate(ProductionWorkOrder $workOrder, $data)
    {

        $em = $this->_em;
        $stock =  $em->getRepository();
        if($stock){
         $entity = $stock;
        }else{
         $entity = new ProductionWorkOrderItem();
        }
        $entity->setProductionWorkOrder($workOrder);
        $entity->setProductionItem($productionItem);
        $entity->setProductionItem($productionItem);
        $em->persist($entity);
        $em->flush();
    }


}
