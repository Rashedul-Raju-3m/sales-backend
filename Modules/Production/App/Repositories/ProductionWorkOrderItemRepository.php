<?php

namespace Modules\Production\App\Repositories;
use Doctrine\ORM\EntityRepository;
use Modules\Production\App\Entities\Item;
use Modules\Production\App\Entities\ProductionStock;
use Modules\Production\App\Entities\ProductionWorkOrder;
use Modules\Production\App\Entities\ProductionWorkOrderItem;

/**
 * DamageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionWorkOrderItemRepository extends EntityRepository
{

    public function findProducts(Production $config)
    {
        $qb = $this->createQueryBuilder('item');
        $qb->join('item.productionWorkOrder','wr');
        $qb->join('item.productionItem','pItem');
        $qb->select('item.id as id','pItem.name as name','pItem.uom as uom');
        $qb->where("wr.config = :config")->setParameter('config', $config->getId());
        $qb->andWhere("wr.process = :process")->setParameter('process', 'approved');
        $qb->andWhere('item.issueQuantity >= item.receiveQuantity');
        $result = $qb->getQuery()->getArrayResult();
        return $result;
    }

    public function insertUpdate(ProductionWorkOrder $workOrder, $data)
    {

        $em = $this->_em;
        $productionItem = $em->getRepository('TerminalbdProductionBundle:ProductionItem')->find($data['productId']);
        $stock = $this->findOneBy(array('productionWorkOrder'=>$workOrder,'productionItem' => $productionItem));
        if($stock){
         $entity = $stock;
        }else{
         $entity = new ProductionWorkOrderItem();
        }
        $entity->setProductionWorkOrder($workOrder);
        $entity->setProductionItem($productionItem);
        $entity->setIssueQuantity($data['quantity']);
        $em->persist($entity);
        $em->flush();
    }


}
