<?php

namespace Modules\Production\App\Repositories;
use Doctrine\ORM\EntityRepository;


/**
 * DamageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionBatchItemRepository extends EntityRepository
{

    public function  checkConsumtionStatus(ProductionItem $productionItem,$issueQuantity)
    {
       $status = 'valid';
       /* @var $row ProductionElement */
       foreach ($productionItem->getElements() as $row):
           if($row->isStatus() == 1){
               $consumtionQnt =  ($row->getQuantity() + $row->getWastageQuantity()) * $issueQuantity;
               if( $consumtionQnt > $row->getMaterial()->getRemainingQuantity()){
                   $status = 'invalid';
                   break;
               }
           }
       endforeach;
       return $status;
    }

    public function findOpeningQuantity($config)
    {
        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.batch','pb');
        $qb->where("pb.config = :config")->setParameter('config', $config);
        $qb->andWhere("pb.mode = :mode")->setParameter('mode', 'opening');
        $qb->andWhere("pb.process = :process")->setParameter('process', 'closed');
        $result = $qb->getQuery()->getResult();
        return $result;
    }

    public function updateProcessStatus(ProductionBatch $entity){

        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('COUNT(e.id) AS count','SUM(e.remainingQuantity) AS remain');
        $qb->where("e.batch = :item")->setParameter('item', $entity->getId());
        $qb->andWhere("e.status = :status")->setParameter('status', 'invalid');
        $result = $qb->getQuery()->getOneOrNullResult();
        $count = $result['count'];
        if($count > 0){
            $entity->setStatus(false);
        }else{
            $entity->setStatus(true);
        }
        $em->flush();
    }

    public function closingProcessProductionBatch(ProductionBatch $entity){

        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('COUNT(e.id) AS count','SUM(e.remainingQuantity) AS remain');
        $qb->where("e.batch = :item")->setParameter('item', $entity->getId());
        $qb->andWhere("e.status = :status")->setParameter('status', 'valid');
        $result = $qb->getQuery()->getOneOrNullResult();
        $count = $result['count'];
        $remain = $result['remain'];
        if($count > 0){
            $entity->setStatus(false);
        }else{
            $entity->setStatus(true);
        }
        if($remain == 0){
            $entity->setProcess('closed');
        }
        $em->flush();
    }

    public function insertOpeningProduction(ProductionBatch $batch, $data)
    {

        $em = $this->_em;
        $productionItem = $em->getRepository(ProductionItem::class)->find($data['productId']);
        $entity = new ProductionBatchItem();
        $entity->setBatch($batch);
        $entity->setProductionItem($productionItem);
        $entity->setItem($productionItem->getItem());
        $entity->setIssueQuantity($data['issueQuantity']);
        if(empty($data['receiveQuantity'])){
            $entity->setReceiveQuantity($data['issueQuantity']);
        }else{
            $entity->setReceiveQuantity($data['receiveQuantity']);
        }
        $entity->setDamageQuantity($data['damageQuantity']);
        $entity->setStockQuantity($entity->getReceiveQuantity());
        $entity->setRemainingQuantity($entity->getReceiveQuantity());
        $entity->setPrice($productionItem->getItem()->getProductionPrice());
        $entity->setStatus('valid');
        $entity->setMode('opening');
        $em->persist($entity);
        $em->flush();
        $this->updateProcessStatus($entity->getBatch());
    }

    public function updateOpeningProduction(ProductionBatchItem $entity, $data)
    {

        $em = $this->_em;
        $entity->setIssueQuantity($data['issueQuantity']);
        if(empty($data['receiveQuantity'])){
            $entity->setReceiveQuantity($data['issueQuantity']);
        }
        $entity->setDamageQuantity($data['damageQuantity']);
        $entity->setStockQuantity($entity->getReceiveQuantity());
        $entity->setRemainingQuantity($entity->getReceiveQuantity());
        $entity->setStatus('valid');
        $em->persist($entity);
        $em->flush();
        $this->updateProcessStatus($entity->getBatch());
    }



    public function insertAnonymousUpdate(ProductionBatch $batch, $data)
    {

        $em = $this->_em;
        $productionItem = $em->getRepository('TerminalbdProductionBundle:ProductionItem')->find($data['productId']);
        $stock = $this->findOneBy(array('batch' => $batch,'productionItem' => $productionItem));
        $consumtionStatus = $this->checkConsumtionStatus($productionItem,$data['issueQuantity']);
        if($stock){
         $entity = $stock;
        }else{
         $entity = new ProductionBatchItem();
        }
        $entity->setBatch($batch);
        $entity->setProductionItem($productionItem);
        $entity->setItem($productionItem->getItem());
        $entity->setIssueQuantity($data['issueQuantity']);
        $entity->setReceiveQuantity($data['receiveQuantity']);
        $entity->setDamageQuantity($data['damageQuantity']);
        $entity->setStockQuantity($entity->getReceiveQuantity());
        $remain = ($entity->getIssueQuantity() - ($entity->getReceiveQuantity() + $entity->getDamageQuantity() + $entity->getReturnQuantity()));
        $entity->setRemainingQuantity($remain);
        $entity->setStatus($consumtionStatus);
        $em->persist($entity);
        $em->flush();
        $this->updateProcessStatus($entity->getBatch());

    }

    public function updateAnonymous(ProductionBatchItem $entity, $data)
    {

        $em = $this->_em;
        $consumtionStatus = $this->checkConsumtionStatus($entity->getProductionItem(),$data['issueQuantity']);
        $entity->setIssueQuantity($data['issueQuantity']);
        $entity->setReceiveQuantity($data['receiveQuantity']);
        $entity->setDamageQuantity($data['damageQuantity']);
        $entity->setStockQuantity($entity->getReceiveQuantity());
        $remain = ($entity->getIssueQuantity() - ($entity->getReceiveQuantity() + $entity->getDamageQuantity() + $entity->getReturnQuantity()));
        $entity->setRemainingQuantity($remain);
        $entity->setStatus($consumtionStatus);
        $em->persist($entity);
        $em->flush();
        $this->updateProcessStatus($entity->getBatch());
    }



    public function insertWorkorderUpdate(ProductionBatch $batch, $data)
    {

        $em = $this->_em;
        $workOrderItem = $em->getRepository('TerminalbdProductionBundle:ProductionWorkOrderItem')->find($data['productId']);
        $stock = $this->findOneBy(array('batch' => $batch ,'workOrderItem' => $workOrderItem));
        if($stock){
            $entity = $stock;
        }else{
            $entity = new ProductionBatchItem();
        }
        $entity->setBatch($batch);
        $entity->setWorkorderItem($workOrderItem);
        $entity->setProductionItem($workOrderItem->getProductionItem());
        $entity->setIssueQuantity($data['quantity']);
        $em->persist($entity);
        $em->flush();
        $this->updateProcessStatus($entity->getBatch());

    }

    public function updateWorkorder(ProductionBatchItem $entity, $data)
    {

        $em = $this->_em;
        $entity->setIssueQuantity($data['issueQuantity']);
        $entity->setReceiveQuantity($data['receiveQuantity']);
        $entity->setDamageQuantity($data['damageQuantity']);
        $entity->setStockQuantity($entity->getReceiveQuantity());
        $em->persist($entity);
        $em->flush();
        $this->updateProcessStatus($entity->getBatch());
    }

    public function processSalesQuantity(Sales $sales){

        /* @var $getsalesItem SalesItem */
        foreach ($sales->getsalesItems() as $getsalesItem ){
            if($getsalesItem->getItem()->getMasterItem()->getProductGroup()->getSlug() == "finish-goods"){
                $this->_em->getRepository('TerminalbdInventoryBundle:PurchaseItem')->finishGoodsConsumtion($getsalesItem);
            }else{
                $this->salesProductBatch($getsalesItem);
            }
        }
    }

    public function salesProductBatch(SalesItem $item){

        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->join('e.item', 'item');
        $qb->where("item.id = :id")->setParameter('id', $item->getItem()->getId());
        $qb->andWhere("e.stockQuantity > 0");
        $qb->orderBy('e.id', 'ASC');
        $res =  $qb->getQuery()->getResult();

        /* @var $row ProductionBatchItem */

        $reminQnt = $item->getTotalQuantity();

        foreach ($res as $row){

            if( $row->getStockQuantity() >= $reminQnt){
                $row->setSalesQuantity($reminQnt);
                $remin = ($row->getStockQuantity() - $reminQnt);
                $row->setStockQuantity($remin);
                $em->flush();
                $em->getRepository("TerminalbdInventoryBundle:StockItem")->salesItemConsumtion($item,$row,$reminQnt);
                break;

            }elseif( $row->getStockQuantity() > 0 and $row->getStockQuantity() < $reminQnt){

                $row->setSalesQuantity($row->getRemainingQuantity());
                $remin = ($reminQnt - $row->getSalesQuantity());
                $row->setStockQuantity(0);
                $em->flush();
                $em->getRepository("TerminalbdInventoryBundle:StockItem")->salesItemConsumtion($item,$row,$row->getSalesQuantity());
                $reminQnt = $remin;
                if($reminQnt == 0){
                    break;
                }
            }
        }

    }

    public function updateBatchSalesReturnItem(ProductionBatchItem $item){

        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        $qb->from('TerminalbdInventoryBundle:StockItem','stock');
        $qb->addSelect('SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity');
        $qb->where("stock.productionBatchItem = :batchItem");
        $qb->setParameter('batchItem', $item->getId());
        $qb->andWhere('stock.process IN(:process)');
        $qb->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        $item->setSalesQuantity($quantity['salesQuantity']);
        $item->setSalesReturnQuantity($quantity['salesReturnQuantity']);
        $remin = ($item->getReceiveQuantity() + $item->getSalesReturnQuantity() - $item->getSalesQuantity());
        $item->setStockQuantity($remin);
        $em->flush();

    }

    public function  getCurrentBatchItems(Item $item,$url)
    {
        $select = "";
        $qb = $this->createQueryBuilder('stock');
        $qb->join('stock.batch','batch');
        $qb->select('stock.id as id','stock.stockQuantity as stockQuantity','batch.invoice as invoice');
        $qb->where("stock.item = :batchItem");
        $qb->setParameter('batchItem', $item->getId());
        $qb->andWhere('stock.status =:process')->setParameter('process','valid');
        $qb->andWhere('stock.stockQuantity > 0');
        $qb->orderBy('batch.id','ASC');
        $result = $qb->getQuery()->getArrayResult();
        $select .= '<select name="productionBatch" id="productionBatch" data-action="'.$url.'" class="form-control form-control-lg batchItem" style="width: 100%" >';
        $select .= " <option value=''>-- Select a production batch --</option>";
        if($result){
            foreach ($result as $row):
                $quantity = number_format($row['stockQuantity'],'5','.','');
                if($quantity > 1){
                    $select .= "<option data-id='{$row['stockQuantity']}'  value='{$row['id']}'>{$row['invoice']} => {$quantity}</option>";
                };
            endforeach;
        }
        $select .="</select>";
        return $select;

    }

    public function updateBatchItemQnt(ProductionBatchItem $batchItem)
    {
        $em = $this->_em;
        $qb = $em->createQueryBuilder();
        $qb->from('TerminalbdInventoryBundle:StockItem','stock');
        $qb->addSelect('SUM(stock.salesQuantity) as salesQuantity','SUM(stock.salesReturnQuantity) as salesReturnQuantity','SUM(stock.damageQuantity) as damageQuantity');
        $qb->where("stock.productionBatchItem = :batchItem");
        $qb->setParameter('batchItem', $batchItem->getId());
        $qb->andWhere('stock.process IN(:process)');
        $qb->setParameter('process',array_values(array('approved')));
        $quantity =  $qb->getQuery()->getOneOrNullResult();
        $batchItem->setSalesQuantity($quantity['salesQuantity']);
        $batchItem->setSalesReturnQuantity($quantity['salesReturnQuantity']);
        $batchItem->setSalesDamageQuantity($quantity['damageQuantity']);
        $quantity = ($batchItem->getReceiveQuantity() + $batchItem->getSalesReturnQuantity() - $batchItem->getSalesQuantity());
        $batchItem->setStockQuantity($quantity);
        $em->flush();
    }



}
