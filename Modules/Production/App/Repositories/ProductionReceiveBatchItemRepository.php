<?php

namespace Modules\Production\App\Repositories;

use Doctrine\ORM\EntityRepository;
use Modules\Production\App\Entities\Item;
use Modules\Production\App\Entities\ProductionBatch;
use Modules\Production\App\Entities\ProductionBatchItem;
use Modules\Production\App\Entities\ProductionElement;
use Modules\Production\App\Entities\ProductionItem;
use Modules\Production\App\Entities\ProductionReceiveBatch;
use Modules\Production\App\Entities\ProductionReceiveBatchItem;
use Modules\Production\App\Entities\ProductionStock;
use Modules\Production\App\Entities\ProductionWorkOrder;
use Modules\Production\App\Entities\ProductionWorkOrderItem;

/**
 * DamageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionReceiveBatchItemRepository extends EntityRepository
{

    public function contractualReceive(ProductionReceiveBatch $batch,ProductionBatchItem $item, $data)
    {

        $em = $this->_em;
        $exist = $this->findOneBy(array('receiveBatch'=> $batch, 'batchItem' => $item));
        if($exist){
            $this->updateReceiveBatchItem($exist,$data);
        }else{
            $entity = new ProductionReceiveBatchItem();
            $entity->setReceiveBatch($batch);
            $entity->setBatchItem($item);
            $entity->setItem($item->getItem());
            $entity->setReceiveQuantity($data['receiveQuantity']);
            $entity->setDamageQuantity($data['damageQuantity']);
            $entity->setReturnQuantity($data['returnQuantity']);
            $em->persist($entity);
            $em->flush();
        }


    }

    private  function  updateReceiveBatchItem(ProductionReceiveBatchItem $entity,$data){
        $em = $this->_em;
        if($data['receiveQuantity']){
            $entity->setReceiveQuantity($data['receiveQuantity']);
        }
        if($data['damageQuantity']){
            $entity->setDamageQuantity($data['damageQuantity']);
        }
        if($data['returnQuantity']){
            $entity->setReturnQuantity($data['returnQuantity']);
        }
        $em->persist($entity);
        $em->flush();
    }

    public function productionReceiveApprove(ProductionReceiveBatch $batch)
    {

        $em = $this->_em;

        /* @var $item ProductionReceiveBatchItem */

        foreach ($batch->getReceiveItems() as $item){
            if($item->getStatus() == 'invalid'){
                $item->setStatus('valid');
                $em->persist($item);
                $em->flush();
                if($item->getReturnQuantity() > 0){
                    $em->getRepository('TerminalbdProductionBundle:ProductionExpense')->productionReturnElementExpense($item);
                }
                $this->updateProductionBatchItem($item->getBatchItem());
            }
        }
    }

    public function updateProductionBatchItem(ProductionBatchItem $item)
    {

        $em = $this->_em;
        $qb = $this->createQueryBuilder('e');
        $qb->select('SUM(e.receiveQuantity) AS receiveQuantity','SUM(e.damageQuantity) AS damageQuantity','SUM(e.returnQuantity) AS returnQuantity');
        $qb->where("e.batchItem = :item")->setParameter('item', $item->getId());
        $qb->andWhere("e.status = :status")->setParameter('status', 'valid');
        $result = $qb->getQuery()->getOneOrNullResult();
        $item->setReceiveQuantity($result['receiveQuantity']);
        $item->setDamageQuantity($result['damageQuantity']);
        $item->setReturnQuantity($result['returnQuantity']);
        $remain = ($item->getIssueQuantity() - ($item->getReceiveQuantity() + $item->getDamageQuantity() + $item->getReturnQuantity()));
        $item->setRemainingQuantity($remain);
        $stockQnt = ($item->getReceiveQuantity() + $item->getSalesReturnQuantity()) - ($item->getSalesQuantity()-$item->getSalesDamageQuantity());
        $item->setStockQuantity($stockQnt);
        $em->flush();
        $em->getRepository('TerminalbdProductionBundle:ProductionBatchItem')->closingProcessProductionBatch($item->getBatch());

    }



}
