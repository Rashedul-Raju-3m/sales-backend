<?php

namespace Modules\Production\App\Repositories;
use Doctrine\ORM\EntityRepository;
use Modules\Production\App\Entities\ProductionItem;
use Modules\Production\App\Entities\ProductionItemAmendment;
use Modules\Production\App\Entities\ProductionStock;

/**
 * ProductionItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionItemAmenmentRepository extends EntityRepository
{

    public function findInitiateAmendment(ProductionItem $item)
    {

        $process = array('created','checked');
        $qb = $this->createQueryBuilder('item');
        $qb->where("item.productionItem = :item")->setParameter('item', $item->getId());
        $qb->andWhere("item.process IN (:process) ")->setParameter('process', $process);
        $qb->andWhere("item.status !=1");
        $result = $qb->getQuery()->getOneOrNullResult();
        return $result;
    }

    public function insertAmendmentProduction(User $user, ProductionItem $item)
    {
        $em = $this->_em;
        $entity = new ProductionItemAmendment();
        $entity->setConfig($item->getConfig());
        $entity->setProductionItem($item);
        $entity->setSubTotal($item->getSubTotal());
        $entity->setQuantity($item->getQuantity());
        $entity->setItem($item->getItem());
        $entity->setUom($item->getUom());
        $entity->setWasteAmount($item->getWasteAmount());
        $entity->setWastePercent($item->getWastePercent());
        $entity->setMaterialQuantity($item->getMaterialQuantity());
        $entity->setWasteMaterialQuantity($item->getWasteMaterialQuantity());
        $entity->setMaterialAmount($item->getMaterialAmount());
        $entity->setValueAddedAmount($item->getValueAddedAmount());
        $entity->setCreatedBy($user);
        $entity->setIssueBy($user->getName());
        $entity->setDesignation($user->getDesignation()->getName());
        $em->persist($entity);
        $em->flush();
        $em->getRepository('TerminalbdProductionBundle:ProductionValueAdded')->getProductionAmendmentValueAdded($entity,$item);
        $amendment = $em->getRepository('TerminalbdProductionBundle:ProductionElement')->getProductionAmendmentElement($entity,$item);
        return $amendment;

    }

    public function insertUpdate(Production $config , Item $item)
    {

        $em = $this->_em;
        $stock =  $this->findOneBy(array('item'=> $item->getId()));
        if($stock){
         $entity = $stock;
        }else{
         $entity = new ProductionItem();
        }
        $unit = !empty($item->getUnit() && !empty($item->getUnit()->getName())) ? $item->getUnit()->getName():'';
        $entity->setName($item->getName());
        $entity->setItem($item);
        $entity->setConfig($config);
        $entity->setUom($unit);
        $em->persist($entity);
        $em->flush();
    }

}
